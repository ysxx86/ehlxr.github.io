<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ehlxr&#39;s Blog</title>
  
  <subtitle>世界那么大，在此安个家...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ehlxr.me/"/>
  <updated>2017-11-24T12:06:23.834Z</updated>
  <id>https://ehlxr.me/</id>
  
  <author>
    <name>小桥流水人家</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[转]Tmux 快捷键速查表</title>
    <link href="https://ehlxr.me/2017/10/25/tmux-cheat-sheet/"/>
    <id>https://ehlxr.me/2017/10/25/tmux-cheat-sheet/</id>
    <published>2017-10-25T06:45:24.000Z</published>
    <updated>2017-11-24T12:06:23.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tmux-快捷键-amp-速查表"><a href="#Tmux-快捷键-amp-速查表" class="headerlink" title="Tmux 快捷键 &amp; 速查表"></a>Tmux 快捷键 &amp; 速查表</h1><p>启动新会话：</p><pre><code>tmux [new -s 会话名 -n 窗口名]</code></pre><p>恢复会话：</p><pre><code>tmux at [-t 会话名]</code></pre><p>列出所有会话：</p><pre><code>tmux ls</code></pre><p><a name="killSessions"></a>关闭会话：</p><pre><code>tmux kill-session -t 会话名</code></pre><p><a name="killAllSessions"></a>关闭所有会话：</p><pre><code>tmux ls | grep : | cut -d. -f1 | awk &apos;{print substr($1, 0, length($1)-1)}&apos; | xargs kill</code></pre><a id="more"></a><h1 id="在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后："><a href="#在-Tmux-中，按下-Tmux-前缀-ctrl-b，然后：" class="headerlink" title="在 Tmux 中，按下 Tmux 前缀 ctrl+b，然后："></a>在 Tmux 中，按下 Tmux 前缀 <code>ctrl+b</code>，然后：</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><pre><code>:new&lt;回车&gt;  启动新会话s           列出所有会话$           重命名当前会话</code></pre><h2 id="窗口-标签页"><a href="#窗口-标签页" class="headerlink" title="窗口 (标签页)"></a><a name="WindowsTabs"></a>窗口 (标签页)</h2><pre><code>c  创建新窗口w  列出所有窗口n  后一个窗口p  前一个窗口f  查找窗口,  重命名当前窗口&amp;  关闭当前窗口</code></pre><h2 id="调整窗口排序"><a href="#调整窗口排序" class="headerlink" title="调整窗口排序"></a>调整窗口排序</h2><pre><code>swap-window -s 3 -t 1  交换 3 号和 1 号窗口swap-window -t 1       交换当前和 1 号窗口move-window -t 1       移动当前窗口到 1 号</code></pre><h2 id="窗格（分割窗口）"><a href="#窗格（分割窗口）" class="headerlink" title="窗格（分割窗口）"></a><a name="PanesSplits"></a>窗格（分割窗口）</h2><pre><code>%  垂直分割&quot;  水平分割o  交换窗格x  关闭窗格⍽  左边这个符号代表空格键 - 切换布局q 显示每个窗格是第几个，当数字出现的时候按数字几就选中第几个窗格{ 与上一个窗格交换位置} 与下一个窗格交换位置z 切换窗格最大化/最小化</code></pre><h2 id="同步窗格"><a href="#同步窗格" class="headerlink" title="同步窗格"></a><a name="syncPanes"></a>同步窗格</h2><p>这么做可以切换到想要的窗口，输入 Tmux 前缀和一个冒号呼出命令提示行，然后输入：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:setw</span> <span class="selector-tag">synchronize-panes</span></span><br></pre></td></tr></table></figure><p>你可以指定开或关，否则重复执行命令会在两者间切换。<br>这个选项值针对某个窗口有效，不会影响别的会话和窗口。<br>完事儿之后再次执行命令来关闭。<a href="http://blog.sanctum.geek.nz/sync-tmux-panes/" target="_blank" rel="noopener">帮助</a></p><h2 id="调整窗格尺寸"><a href="#调整窗格尺寸" class="headerlink" title="调整窗格尺寸"></a>调整窗格尺寸</h2><p>如果你不喜欢默认布局，可以重调窗格的尺寸。虽然这很容易实现，但一般不需要这么干。这几个命令用来调整窗格：</p><pre><code>PREFIX : resize-pane -D          当前窗格向下扩大 1 格PREFIX : resize-pane -U          当前窗格向上扩大 1 格PREFIX : resize-pane -L          当前窗格向左扩大 1 格PREFIX : resize-pane -R          当前窗格向右扩大 1 格PREFIX : resize-pane -D 20       当前窗格向下扩大 20 格PREFIX : resize-pane -t 2 -L 20  编号为 2 的窗格向左扩大 20 格</code></pre><h2 id="文本复制模式："><a href="#文本复制模式：" class="headerlink" title="文本复制模式："></a>文本复制模式：</h2><p>按下<strong>前缀 [</strong>进入文本复制模式。可以使用方向键在屏幕中移动光标。默认情况下，方向键是启用的。在配置文件中启用 Vim 键盘布局来切换窗口、调整窗格大小。Tmux 也支持 Vi 模式。要是想启用 Vi 模式，只需要把下面这一行添加到 .tmux.conf 中：</p><pre><code>setw -g mode-keys vi</code></pre><p>启用这条配置后，就可以使用 h、j、k、l 来移动光标了。</p><p>想要退出文本复制模式的话，按下回车键就可以了。一次移动一格效率低下，在 Vi 模式启用的情况下，可以辅助一些别的快捷键高效工作。</p><p>例如，可以使用 w 键逐词移动，使用 b 键逐词回退。使用 f 键加上任意字符跳转到当前行第一次出现该字符的位置，使用 F 键达到相反的效果。</p><pre><code>vi             emacs        功能^              M-m          反缩进Escape         C-g          清除选定内容Enter          M-w          复制选定内容j              Down         光标下移h              Left         光标左移l              Right        光标右移L                           光标移到尾行M              M-r          光标移到中间行H              M-R          光标移到首行k              Up           光标上移d              C-u          删除整行D              C-k          删除到行末$              C-e          移到行尾:              g            前往指定行C-d            M-Down       向下滚动半屏C-u            M-Up         向上滚动半屏C-f            Page down    下一页w              M-f          下一个词p              C-y          粘贴C-b            Page up      上一页b              M-b          上一个词q              Escape       退出C-Down or J    C-Down       向下翻C-Up or K      C-Up         向下翻n              n            继续搜索?              C-r          向前搜索/              C-s          向后搜索0              C-a          移到行首Space          C-Space      开始选中               C-t          字符调序</code></pre><h2 id="杂项："><a href="#杂项：" class="headerlink" title="杂项："></a>杂项：</h2><pre><code>d  退出 tmux（tmux 仍在后台运行）t  窗口中央显示一个数字时钟?  列出所有快捷键:  命令提示符</code></pre><h2 id="配置选项："><a href="#配置选项：" class="headerlink" title="配置选项："></a>配置选项：</h2><pre><code># 鼠标支持 - 设置为 on 来启用鼠标* setw -g mode-mouse off* set -g mouse-select-pane off* set -g mouse-resize-pane off* set -g mouse-select-window off# 设置默认终端模式为 256colorset -g default-terminal &quot;screen-256color&quot;# 启用活动警告setw -g monitor-activity onset -g visual-activity on# 居中窗口列表set -g status-justify centre# 最大化/恢复窗格unbind Up bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmpunbind Downbind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp</code></pre><h2 id="配置文件（-tmux-conf）："><a href="#配置文件（-tmux-conf）：" class="headerlink" title="配置文件（~/.tmux.conf）："></a>配置文件（~/.tmux.conf）：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基础设置</span></span><br><span class="line"><span class="built_in">set</span> -g default-terminal <span class="string">"screen-256color"</span></span><br><span class="line"><span class="built_in">set</span> -g display-time 3000</span><br><span class="line"><span class="built_in">set</span> -g escape-time 0</span><br><span class="line"><span class="built_in">set</span> -g <span class="built_in">history</span>-limit 65535</span><br><span class="line"><span class="built_in">set</span> -g base-index 1</span><br><span class="line"><span class="built_in">set</span> -g pane-base-index 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 前缀绑定 (Ctrl+a)</span></span><br><span class="line"><span class="built_in">set</span> -g prefix ^a</span><br><span class="line">unbind ^b</span><br><span class="line"><span class="built_in">bind</span> a send-prefix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割窗口</span></span><br><span class="line">unbind <span class="string">'"'</span></span><br><span class="line"><span class="built_in">bind</span> - splitw -v</span><br><span class="line">unbind %</span><br><span class="line"><span class="built_in">bind</span> | splitw -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选中窗口</span></span><br><span class="line"><span class="built_in">bind</span>-key k select-pane -U</span><br><span class="line"><span class="built_in">bind</span>-key j select-pane -D</span><br><span class="line"><span class="built_in">bind</span>-key h select-pane -L</span><br><span class="line"><span class="built_in">bind</span>-key l select-pane -R</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy-mode 将快捷键设置为 vi 模式</span></span><br><span class="line">setw -g mode-keys vi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用鼠标(Tmux v2.1)</span></span><br><span class="line"><span class="built_in">set</span> -g mouse on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新配置文件</span></span><br><span class="line"><span class="built_in">bind</span> r <span class="built_in">source</span>-file ~/.tmux.conf \; display <span class="string">"已更新"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span><br><span class="line"><span class="comment"># Tmux Plugin Manager(Tmux v2.1)</span></span><br><span class="line"><span class="comment"># Tmux Resurrect</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-resurrect'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List of plugins</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tpm'</span></span><br><span class="line"><span class="built_in">set</span> -g @plugin <span class="string">'tmux-plugins/tmux-sensible'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Other examples:</span></span><br><span class="line"><span class="comment"># set -g @plugin 'github_username/plugin_name'</span></span><br><span class="line"><span class="comment"># set -g @plugin 'git@github.com/user/plugin'</span></span><br><span class="line"><span class="comment"># set -g @plugin 'git@bitbucket.com/user/plugin'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)</span></span><br><span class="line">run <span class="string">'~/.tmux/plugins/tpm/tpm'</span></span><br><span class="line"><span class="comment">#&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://gist.github.com/ryerh/14b7c24dfd623ef8edc7" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Tmux-快捷键-amp-速查表&quot;&gt;&lt;a href=&quot;#Tmux-快捷键-amp-速查表&quot; class=&quot;headerlink&quot; title=&quot;Tmux 快捷键 &amp;amp; 速查表&quot;&gt;&lt;/a&gt;Tmux 快捷键 &amp;amp; 速查表&lt;/h1&gt;&lt;p&gt;启动新会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux [new -s 会话名 -n 窗口名]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;恢复会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux at [-t 会话名]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;列出所有会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux ls
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a name=&quot;killSessions&quot;&gt;&lt;/a&gt;关闭会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux kill-session -t 会话名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a name=&quot;killAllSessions&quot;&gt;&lt;/a&gt;关闭所有会话：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tmux ls | grep : | cut -d. -f1 | awk &amp;apos;{print substr($1, 0, length($1)-1)}&amp;apos; | xargs kill
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Tmux" scheme="https://ehlxr.me/tags/Tmux/"/>
    
  </entry>
  
  <entry>
    <title>[转] Go Cheat Sheet</title>
    <link href="https://ehlxr.me/2017/08/24/golang-cheat-sheet/"/>
    <id>https://ehlxr.me/2017/08/24/golang-cheat-sheet/</id>
    <published>2017-08-24T06:18:53.000Z</published>
    <updated>2017-11-08T03:36:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-Cheat-Sheet"><a href="#Go-Cheat-Sheet" class="headerlink" title="Go Cheat Sheet"></a>Go Cheat Sheet</h1><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p>Most example code taken from <a href="http://tour.golang.org/" target="_blank" rel="noopener">A Tour of Go</a>, which is an excellent introduction to Go.<br>If you’re new to Go, do that tour. Seriously.</p><h2 id="Go-in-a-Nutshell"><a href="#Go-in-a-Nutshell" class="headerlink" title="Go in a Nutshell"></a>Go in a Nutshell</h2><ul><li>Imperative language</li><li>Statically typed</li><li>Syntax tokens similar to C (but less parentheses and no semicolons) and the structure to Oberon-2</li><li>Compiles to native code (no JVM)</li><li>No classes, but structs with methods</li><li>Interfaces</li><li>No implementation inheritance. There’s <a href="http://golang.org/doc/effective%5Fgo.html#embedding" target="_blank" rel="noopener">type embedding</a>, though.</li><li>Functions are first class citizens</li><li>Functions can return multiple values</li><li>Has closures</li><li>Pointers, but not pointer arithmetic</li><li>Built-in concurrency primitives: Goroutines and Channels</li></ul><a id="more"></a><h1 id="Basic-Syntax"><a href="#Basic-Syntax" class="headerlink" title="Basic Syntax"></a>Basic Syntax</h1><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>File <code>hello.go</code>:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Go"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>$ go run hello.go</code></p><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><h3 id="Arithmetic"><a href="#Arithmetic" class="headerlink" title="Arithmetic"></a>Arithmetic</h3><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>+</code></td><td>addition</td></tr><tr><td><code>-</code></td><td>subtraction</td></tr><tr><td><code>*</code></td><td>multiplication</td></tr><tr><td><code>/</code></td><td>quotient</td></tr><tr><td><code>%</code></td><td>remainder</td></tr><tr><td><code>&amp;</code></td><td>bitwise and</td></tr><tr><td><code>?</code></td><td>bitwise or</td></tr><tr><td><code>^</code></td><td>bitwise xor</td></tr><tr><td><code>&amp;^</code></td><td>bit clear (and not)</td></tr><tr><td><code>&lt;&lt;</code></td><td>left shift</td></tr><tr><td><code>&gt;&gt;</code></td><td>right shift</td></tr></tbody></table><blockquote><p><code>?</code> -&gt; <code>|</code></p></blockquote><h3 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a>Comparison</h3><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>==</code></td><td>equal</td></tr><tr><td><code>!=</code></td><td>not equal</td></tr><tr><td><code>&lt;</code></td><td>less than</td></tr><tr><td><code>&lt;=</code></td><td>less than or equal</td></tr><tr><td><code>&gt;</code></td><td>greater than</td></tr><tr><td><code>&gt;=</code></td><td>greater than or equal</td></tr></tbody></table><h3 id="Logical"><a href="#Logical" class="headerlink" title="Logical"></a>Logical</h3><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>&amp;&amp;</code></td><td>logical and</td></tr><tr><td><code>??</code></td><td>logical or</td></tr><tr><td><code>!</code></td><td>logical not</td></tr></tbody></table><blockquote><p><code>??</code> -&gt; <code>||</code></p></blockquote><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><table><thead><tr><th>Operator</th><th>Description</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>address of / create pointer</td></tr><tr><td><code>*</code></td><td>dereference pointer</td></tr><tr><td><code>&lt;-</code></td><td>send / receive operator (see ‘Channels’ below)</td></tr></tbody></table><h2 id="Declarations"><a href="#Declarations" class="headerlink" title="Declarations"></a>Declarations</h2><p>Type goes after identifier!<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo <span class="keyword">int</span> <span class="comment">// declaration without initialization</span></span><br><span class="line"><span class="keyword">var</span> foo <span class="keyword">int</span> = <span class="number">42</span> <span class="comment">// declaration with initialization</span></span><br><span class="line"><span class="keyword">var</span> foo, bar <span class="keyword">int</span> = <span class="number">42</span>, <span class="number">1302</span> <span class="comment">// declare and init multiple vars at once</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">42</span> <span class="comment">// type omitted, will be inferred</span></span><br><span class="line">foo := <span class="number">42</span> <span class="comment">// shorthand, only in func bodies, omit var keyword, type is always implicit</span></span><br><span class="line"><span class="keyword">const</span> constant = <span class="string">"This is a constant"</span></span><br></pre></td></tr></table></figure></p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a simple function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function with parameters (again, types go after identifiers)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(param1 <span class="keyword">string</span>, param2 <span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiple parameters of the same type</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">(param1, param2 <span class="keyword">int</span>)</span></span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// return type declaration</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionName</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can return multiple values at once</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnMulti</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">42</span>, <span class="string">"foobar"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, str = returnMulti()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return multiple named results simply by return</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">returnMulti2</span><span class="params">()</span> <span class="params">(n <span class="keyword">int</span>, s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    n = <span class="number">42</span></span><br><span class="line">    s = <span class="string">"foobar"</span></span><br><span class="line">    <span class="comment">// n and s will be returned</span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x, str = returnMulti2()</span><br></pre></td></tr></table></figure><h3 id="Functions-As-Values-And-Closures"><a href="#Functions-As-Values-And-Closures" class="headerlink" title="Functions As Values And Closures"></a>Functions As Values And Closures</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// assign a function to a name</span></span><br><span class="line">    add := <span class="function"><span class="keyword">func</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// use the name to call the function</span></span><br><span class="line">    fmt.Println(add(<span class="number">3</span>, <span class="number">4</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Closures, lexically scoped: Functions can access values that were</span></span><br><span class="line"><span class="comment">// in scope when defining the function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scope</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    outer_var := <span class="number">2</span></span><br><span class="line">    foo := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> outer_var&#125;</span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">another_scope</span><span class="params">()</span> <span class="title">func</span><span class="params">()</span> <span class="title">int</span></span>&#123;</span><br><span class="line">    <span class="comment">// won't compile because outer_var and foo not defined in this scope</span></span><br><span class="line">    outer_var = <span class="number">444</span></span><br><span class="line">    <span class="keyword">return</span> foo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Closures: don't mutate outer vars, instead redefine them!</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">outer</span><span class="params">()</span> <span class="params">(<span class="keyword">func</span>()</span> <span class="title">int</span>, <span class="title">int</span>)</span> &#123;</span><br><span class="line">    outer_var := <span class="number">2</span></span><br><span class="line">    inner := <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">        outer_var += <span class="number">99</span> <span class="comment">// attempt to mutate outer_var from outer scope</span></span><br><span class="line">        <span class="keyword">return</span> outer_var <span class="comment">// =&gt; 101 (but outer_var is a newly redefined</span></span><br><span class="line">                         <span class="comment">//         variable visible only inside inner)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner, outer_var <span class="comment">// =&gt; 101, 2 (outer_var is still 2, not mutated by foo!)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Variadic-Functions"><a href="#Variadic-Functions" class="headerlink" title="Variadic Functions"></a>Variadic Functions</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(adder(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)) <span class="comment">// 6</span></span><br><span class="line">fmt.Println(adder(<span class="number">9</span>, <span class="number">9</span>))<span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line">nums := []<span class="keyword">int</span>&#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;</span><br><span class="line">fmt.Println(adder(nums...))<span class="comment">// 60</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// By using ... before the type name of the last parameter you can indicate that it takes zero or more of those parameters.</span></span><br><span class="line"><span class="comment">// The function is invoked like any other function except we can pass as many arguments as we want.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(args ...<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">total := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> args &#123; <span class="comment">// Iterates over the arguments whatever the number.</span></span><br><span class="line">total += v</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Built-in-Types"><a href="#Built-in-Types" class="headerlink" title="Built-in Types"></a>Built-in Types</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int8</span>  <span class="keyword">int16</span>  <span class="keyword">int32</span>  <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">uint</span> <span class="keyword">uint8</span> <span class="keyword">uint16</span> <span class="keyword">uint32</span> <span class="keyword">uint64</span> <span class="keyword">uintptr</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span> <span class="comment">// alias for uint8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">rune</span> <span class="comment">// alias for int32 ~= a character (Unicode code point) - very Viking</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float32</span> <span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">complex64</span> <span class="keyword">complex128</span></span><br></pre></td></tr></table></figure><h2 id="Type-Conversions"><a href="#Type-Conversions" class="headerlink" title="Type Conversions"></a>Type Conversions</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="keyword">float64</span> = <span class="keyword">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="keyword">uint</span> = <span class="keyword">uint</span>(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// alternative syntax</span></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="keyword">float64</span>(i)</span><br><span class="line">u := <span class="keyword">uint</span>(f)</span><br></pre></td></tr></table></figure><h2 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h2><ul><li>Package declaration at top of every source file</li><li>Executables are in package <code>main</code></li><li>Convention: package name == last name of import path (import path <code>math/rand</code> =&gt; package <code>rand</code>)</li><li>Upper case identifier: exported (visible from other packages)</li><li>Lower case identifier: private (not visible from other packages)</li></ul><h2 id="Control-structures"><a href="#Control-structures" class="headerlink" title="Control structures"></a>Control structures</h2><h3 id="If"><a href="#If" class="headerlink" title="If"></a>If</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Basic one</span></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> -x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// You can put one statement before the condition</span></span><br><span class="line"><span class="keyword">if</span> a := b + c; a &lt; <span class="number">42</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a - <span class="number">42</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type assertion inside if</span></span><br><span class="line"><span class="keyword">var</span> val <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">val = <span class="string">"foo"</span></span><br><span class="line"><span class="keyword">if</span> str, ok := val.(<span class="keyword">string</span>); ok &#123;</span><br><span class="line">fmt.Println(str)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// There's only `for`, no `while`, no `until`</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; i &lt; <span class="number">10</span>;  &#123; <span class="comment">// while - loop</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i &lt; <span class="number">10</span>  &#123; <span class="comment">// you can omit semicolons if there is only a condition</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123; <span class="comment">// you can omit the condition ~ while (true)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// switch statement</span></span><br><span class="line"><span class="keyword">switch</span> operatingSystem &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Mac OS Hipster"</span>)</span><br><span class="line">    <span class="comment">// cases break automatically, no fallthrough by default</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">    fmt.Println(<span class="string">"Linux Geek"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// Windows, BSD, ...</span></span><br><span class="line">    fmt.Println(<span class="string">"Other"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as with for and if, you can have an assignment statement before the switch value</span></span><br><span class="line"><span class="keyword">switch</span> os := runtime.GOOS; os &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>: ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// you can also make comparisons in switch cases</span></span><br><span class="line">number := <span class="number">42</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> number &lt; <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Smaller"</span>)</span><br><span class="line">    <span class="keyword">case</span> number == <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Equal"</span>)</span><br><span class="line">    <span class="keyword">case</span> number &gt; <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"Greater"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Arrays-Slices-Ranges"><a href="#Arrays-Slices-Ranges" class="headerlink" title="Arrays, Slices, Ranges"></a>Arrays, Slices, Ranges</h2><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a [<span class="number">10</span>]<span class="keyword">int</span> <span class="comment">// declare an int array with length 10. Array length is part of the type!</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">42</span>     <span class="comment">// set elements</span></span><br><span class="line">i := a[<span class="number">3</span>]     <span class="comment">// read elements</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// declare and initialize</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line">a := [<span class="number">2</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">//shorthand</span></span><br><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// elipsis -&gt; Compiler figures out array length</span></span><br></pre></td></tr></table></figure><h3 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a []<span class="keyword">int</span>                              <span class="comment">// declare a slice - similar to an array, but length is unspecified</span></span><br><span class="line"><span class="keyword">var</span> a = []<span class="keyword">int</span> &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;               <span class="comment">// declare and initialize a slice (backed by the array given implicitly)</span></span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;                   <span class="comment">// shorthand</span></span><br><span class="line">chars := []<span class="keyword">string</span>&#123;<span class="number">0</span>:<span class="string">"a"</span>, <span class="number">2</span>:<span class="string">"c"</span>, <span class="number">1</span>: <span class="string">"b"</span>&#125;  <span class="comment">// ["a", "b", "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = a[lo:hi]<span class="comment">// creates a slice (view of the array) from index lo to hi-1</span></span><br><span class="line"><span class="keyword">var</span> b = a[<span class="number">1</span>:<span class="number">4</span>]<span class="comment">// slice from index 1 to 3</span></span><br><span class="line"><span class="keyword">var</span> b = a[:<span class="number">3</span>]<span class="comment">// missing low index implies 0</span></span><br><span class="line"><span class="keyword">var</span> b = a[<span class="number">3</span>:]<span class="comment">// missing high index implies len(a)</span></span><br><span class="line">a =  <span class="built_in">append</span>(a,<span class="number">17</span>,<span class="number">3</span>)<span class="comment">// append items to slice a</span></span><br><span class="line">c := <span class="built_in">append</span>(a,b...)<span class="comment">// concatenate slices a and b</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create a slice with make</span></span><br><span class="line">a = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>, <span class="number">5</span>)<span class="comment">// first arg length, second capacity</span></span><br><span class="line">a = <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">5</span>)<span class="comment">// capacity is optional</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create a slice from an array</span></span><br><span class="line">x := [<span class="number">3</span>]<span class="keyword">string</span>&#123;<span class="string">"Лайка"</span>, <span class="string">"Белка"</span>, <span class="string">"Стрелка"</span>&#125;</span><br><span class="line">s := x[:] <span class="comment">// a slice referencing the storage of x</span></span><br></pre></td></tr></table></figure><h3 id="Operations-on-Arrays-and-Slices"><a href="#Operations-on-Arrays-and-Slices" class="headerlink" title="Operations on Arrays and Slices"></a>Operations on Arrays and Slices</h3><p><code>len(a)</code> gives you the length of an array/a slice. It’s a built-in function, not a attribute/method on the array.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loop over an array/a slice</span></span><br><span class="line"><span class="keyword">for</span> i, e := <span class="keyword">range</span> a &#123;</span><br><span class="line">    <span class="comment">// i is the index, e the element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if you only need e:</span></span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> a &#123;</span><br><span class="line">    <span class="comment">// e is the element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...and if you only need the index</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// In Go pre-1.4, you'll get a compiler error if you're not using i and e.</span></span><br><span class="line"><span class="comment">// Go 1.4 introduced a variable-free form, so that you can do this</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">range</span> time.Tick(time.Second) &#123;</span><br><span class="line">    <span class="comment">// do it once a sec</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span></span><br><span class="line">m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">m[<span class="string">"key"</span>] = <span class="number">42</span></span><br><span class="line">fmt.Println(m[<span class="string">"key"</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"key"</span>)</span><br><span class="line"></span><br><span class="line">elem, ok := m[<span class="string">"key"</span>] <span class="comment">// test if key "key" is present and retrieve it, if so</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map literal</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">map</span>[<span class="keyword">string</span>]Vertex&#123;</span><br><span class="line">    <span class="string">"Bell Labs"</span>: &#123;<span class="number">40.68433</span>, <span class="number">-74.39967</span>&#125;,</span><br><span class="line">    <span class="string">"Google"</span>:    &#123;<span class="number">37.42202</span>, <span class="number">-122.08408</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h2><p>There are no classes, only structs. Structs can have methods.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A struct is a type. It's also a collection of fields</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Declaration</span></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">    X, Y <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creating</span></span><br><span class="line"><span class="keyword">var</span> v = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">var</span> v = Vertex&#123;X: <span class="number">1</span>, Y: <span class="number">2</span>&#125; <span class="comment">// Creates a struct by defining values with keys</span></span><br><span class="line"><span class="keyword">var</span> v = []Vertex&#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">5</span>,<span class="number">2</span>&#125;,&#123;<span class="number">5</span>,<span class="number">5</span>&#125;&#125; <span class="comment">// Initialize a slice of structs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Accessing members</span></span><br><span class="line">v.X = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You can declare methods on structs. The struct you want to declare the</span></span><br><span class="line"><span class="comment">// method on (the receiving type) comes between the the func keyword and</span></span><br><span class="line"><span class="comment">// the method name. The struct is copied on each method call(!)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span> <span class="title">Abs</span><span class="params">()</span> <span class="title">float64</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Call method</span></span><br><span class="line">v.Abs()</span><br><span class="line"></span><br><span class="line"><span class="comment">// For mutating methods, you need to use a pointer (see below) to the Struct</span></span><br><span class="line"><span class="comment">// as the type. With this, the struct value is not copied for the method call.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">add</span><span class="params">(n <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line">    v.X += n</span><br><span class="line">    v.Y += n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Anonymous structs:</strong><br>Cheaper and safer than using <code>map[string]interface{}</code>.<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">point := <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="keyword">int</span></span><br><span class="line">&#125;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">p := Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// p is a Vertex</span></span><br><span class="line">q := &amp;p            <span class="comment">// q is a pointer to a Vertex</span></span><br><span class="line">r := &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// r is also a pointer to a Vertex</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The type of a pointer to a Vertex is *Vertex</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s *Vertex = <span class="built_in">new</span>(Vertex) <span class="comment">// new creates a pointer to a new struct instance</span></span><br></pre></td></tr></table></figure><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interface declaration</span></span><br><span class="line"><span class="keyword">type</span> Awesomizer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Awesomize() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// types do *not* declare to implement interfaces</span></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// instead, types implicitly satisfy an interface if they implement all required methods</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(foo Foo)</span> <span class="title">Awesomize</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Awesome!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Embedding"><a href="#Embedding" class="headerlink" title="Embedding"></a>Embedding</h2><p>There is no subclassing in Go. Instead, there is interface and struct embedding.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReadWriter implementations must satisfy both Reader and Writer</span></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server exposes all the methods that Logger has</span></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">    Host <span class="keyword">string</span></span><br><span class="line">    Port <span class="keyword">int</span></span><br><span class="line">    *log.Logger</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// initialize the embedded type the usual way</span></span><br><span class="line">server := &amp;Server&#123;<span class="string">"localhost"</span>, <span class="number">80</span>, log.New(...)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// methods implemented on the embedded struct are passed through</span></span><br><span class="line">server.Log(...) <span class="comment">// calls server.Logger.Log(...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the field name of the embedded type is its type name (in this case Logger)</span></span><br><span class="line"><span class="keyword">var</span> logger *log.Logger = server.Logger</span><br></pre></td></tr></table></figure><h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><p>There is no exception handling. Functions that might produce an error just declare an additional return value of type <code>Error</code>. This is the <code>Error</code> interface:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>A function that might return an error:<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doStuff</span><span class="params">()</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result, error := doStuff()</span><br><span class="line">    <span class="keyword">if</span> (error != <span class="literal">nil</span>) &#123;</span><br><span class="line">        <span class="comment">// handle error</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// all is good, use result</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h1><h2 id="Goroutines"><a href="#Goroutines" class="headerlink" title="Goroutines"></a>Goroutines</h2><p>Goroutines are lightweight threads (managed by Go, not OS threads). <code>go f(a, b)</code> starts a new goroutine which runs <code>f</code> (given <code>f</code> is a function).</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// just a function (which can be later started as a goroutine)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doStuff</span><span class="params">(s <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// using a named function in a goroutine</span></span><br><span class="line">    <span class="keyword">go</span> doStuff(<span class="string">"foobar"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// using an anonymous inner function in a goroutine</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span> <span class="params">(x <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// function body goes here</span></span><br><span class="line">    &#125;(<span class="number">42</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Channels"><a href="#Channels" class="headerlink" title="Channels"></a>Channels</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>) <span class="comment">// create a channel of type int</span></span><br><span class="line">ch &lt;- <span class="number">42</span>             <span class="comment">// Send a value to the channel ch.</span></span><br><span class="line">v := &lt;-ch            <span class="comment">// Receive a value from ch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Non-buffered channels block. Read blocks when no value is available, write blocks if a value already has been written but not read.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a buffered channel. Writing to a buffered channels does not block if less than &lt;buffer size&gt; unread values have been written.</span></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(ch) <span class="comment">// closes the channel (only sender should close)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// read from channel and test if it has been closed</span></span><br><span class="line">v, ok := &lt;-ch</span><br><span class="line"></span><br><span class="line"><span class="comment">// if ok is false, channel has been closed</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Read from channel until it is closed</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch &#123;</span><br><span class="line">    fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select blocks on multiple channel operations, if one unblocks, the corresponding case is executed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doStuff</span><span class="params">(channelOut, channelIn <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> channelOut &lt;- <span class="number">42</span>:</span><br><span class="line">        fmt.Println(<span class="string">"We could write to channelOut!"</span>)</span><br><span class="line">    <span class="keyword">case</span> x := &lt;- channelIn:</span><br><span class="line">        fmt.Println(<span class="string">"We could read from channelIn"</span>)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">        fmt.Println(<span class="string">"timeout"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Channel-Axioms"><a href="#Channel-Axioms" class="headerlink" title="Channel Axioms"></a>Channel Axioms</h3><ul><li><p>A send to a nil channel blocks forever</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">c &lt;- <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="comment">// fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure></li><li><p>A receive from a nil channel blocks forever</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">string</span></span><br><span class="line">fmt.Println(&lt;-c)</span><br><span class="line"><span class="comment">// fatal error: all goroutines are asleep - deadlock!</span></span><br></pre></td></tr></table></figure></li><li><p>A send to a closed channel panics</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>, <span class="number">1</span>)</span><br><span class="line">c &lt;- <span class="string">"Hello, World!"</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line">c &lt;- <span class="string">"Hello, Panic!"</span></span><br><span class="line"><span class="comment">// panic: send on closed channel</span></span><br></pre></td></tr></table></figure></li><li><p>A receive from a closed channel returns the zero value immediately</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line">c &lt;- <span class="number">1</span></span><br><span class="line">c &lt;- <span class="number">2</span></span><br><span class="line"><span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"%d "</span>, &lt;-c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 0</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Printing"><a href="#Printing" class="headerlink" title="Printing"></a>Printing</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(<span class="string">"Hello, 你好, नमस्ते, Привет, ᎣᏏᏲ"</span>) <span class="comment">// basic print, plus newline</span></span><br><span class="line">p := <span class="keyword">struct</span> &#123; X, Y <span class="keyword">int</span> &#125;&#123; <span class="number">17</span>, <span class="number">2</span> &#125;</span><br><span class="line">fmt.Println( <span class="string">"My point:"</span>, p, <span class="string">"x coord="</span>, p.X ) <span class="comment">// print structs, ints, etc</span></span><br><span class="line">s := fmt.Sprintln( <span class="string">"My point:"</span>, p, <span class="string">"x coord="</span>, p.X ) <span class="comment">// print to string variable</span></span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%d hex:%x bin:%b fp:%f sci:%e"</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">17</span>,<span class="number">17.0</span>,<span class="number">17.0</span>) <span class="comment">// c-ish format</span></span><br><span class="line">s2 := fmt.Sprintf( <span class="string">"%d %f"</span>, <span class="number">17</span>, <span class="number">17.0</span> ) <span class="comment">// formatted print to string variable</span></span><br><span class="line"></span><br><span class="line">hellomsg := <span class="string">`</span></span><br><span class="line"><span class="string"> "Hello" in Chinese is 你好 ('Ni Hao')</span></span><br><span class="line"><span class="string"> "Hello" in Hindi is नमस्ते ('Namaste')</span></span><br><span class="line"><span class="string">`</span> <span class="comment">// multi-line string literal, using back-tick at beginning and end</span></span><br></pre></td></tr></table></figure><h1 id="Snippets"><a href="#Snippets" class="headerlink" title="Snippets"></a>Snippets</h1><h2 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// define a type for the response</span></span><br><span class="line"><span class="keyword">type</span> Hello <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let that type implement the ServeHTTP method (defined in interface http.Handler)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h Hello)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    fmt.Fprint(w, <span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> h Hello</span><br><span class="line">    http.ListenAndServe(<span class="string">"localhost:4000"</span>, h)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Here's the method signature of http.ServeHTTP:</span></span><br><span class="line"><span class="comment">// type Handler interface &#123;</span></span><br><span class="line"><span class="comment">//     ServeHTTP(w http.ResponseWriter, r *http.Request)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><hr><p><a href="https://github.com/a8m/go-lang-cheat-sheet" target="_blank" rel="noopener">原文出处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Go-Cheat-Sheet&quot;&gt;&lt;a href=&quot;#Go-Cheat-Sheet&quot; class=&quot;headerlink&quot; title=&quot;Go Cheat Sheet&quot;&gt;&lt;/a&gt;Go Cheat Sheet&lt;/h1&gt;&lt;h2 id=&quot;Credits&quot;&gt;&lt;a href=&quot;#Credits&quot; class=&quot;headerlink&quot; title=&quot;Credits&quot;&gt;&lt;/a&gt;Credits&lt;/h2&gt;&lt;p&gt;Most example code taken from &lt;a href=&quot;http://tour.golang.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A Tour of Go&lt;/a&gt;, which is an excellent introduction to Go.&lt;br&gt;If you’re new to Go, do that tour. Seriously.&lt;/p&gt;
&lt;h2 id=&quot;Go-in-a-Nutshell&quot;&gt;&lt;a href=&quot;#Go-in-a-Nutshell&quot; class=&quot;headerlink&quot; title=&quot;Go in a Nutshell&quot;&gt;&lt;/a&gt;Go in a Nutshell&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Imperative language&lt;/li&gt;
&lt;li&gt;Statically typed&lt;/li&gt;
&lt;li&gt;Syntax tokens similar to C (but less parentheses and no semicolons) and the structure to Oberon-2&lt;/li&gt;
&lt;li&gt;Compiles to native code (no JVM)&lt;/li&gt;
&lt;li&gt;No classes, but structs with methods&lt;/li&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;No implementation inheritance. There’s &lt;a href=&quot;http://golang.org/doc/effective%5Fgo.html#embedding&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;type embedding&lt;/a&gt;, though.&lt;/li&gt;
&lt;li&gt;Functions are first class citizens&lt;/li&gt;
&lt;li&gt;Functions can return multiple values&lt;/li&gt;
&lt;li&gt;Has closures&lt;/li&gt;
&lt;li&gt;Pointers, but not pointer arithmetic&lt;/li&gt;
&lt;li&gt;Built-in concurrency primitives: Goroutines and Channels&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://ehlxr.me/categories/Golang/"/>
    
    
      <category term="Golang" scheme="https://ehlxr.me/tags/Golang/"/>
    
      <category term="Go" scheme="https://ehlxr.me/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用 PowerMock 进行单元测试</title>
    <link href="https://ehlxr.me/2017/07/25/use-introduction-of-powermock/"/>
    <id>https://ehlxr.me/2017/07/25/use-introduction-of-powermock/</id>
    <published>2017-07-25T11:01:14.000Z</published>
    <updated>2017-11-08T05:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。如果我们写的代码依赖于某些模块对象，而单元测试过程中这些对象又很难手动创建，或者模块还没有开发完成，那么就使用一个虚拟的对象来完成单元测试，这就是所谓的 Mock。</p></blockquote><p>Java 单元测试中比较流行的 Mock 测试框架有 <a href="http://www.jmock.org/" target="_blank" rel="noopener">jMock</a>、<a href="http://easymock.org/" target="_blank" rel="noopener">EasyMock</a>、<a href="https://github.com/mockito/mockito" target="_blank" rel="noopener">Mockito</a>，但是这些 Mock 工具都不能 Mock <code>static</code>、<code>final</code>、<code>private</code> 方法等，而 <a href="https://github.com/powermock/powermock" target="_blank" rel="noopener">PowerMock</a> 能够做到。</p><p>使用 PowerMock，首先需要使用 <code>@RunWith(PowerMockRunner.class)</code> 将测试用例的 Runner 改为 <code>PowerMockRunner</code>。如果要 Mock <code>static</code>、<code>final</code>、<code>private</code> 等方法的时候，就需要加注解 <code>@PrepareForTest</code>。</p><p>PowerMock 有两个版本，一个是基于 EasyMock 实现的，另一个是基于 Mockito 实现的。</p><p>下面我将以 PowerMock 的 Mockito 的版本来讲述如何使用 PowerMock。<br><a id="more"></a></p><h2 id="1-普通-Mock（Mock-参数传递的对象）"><a href="#1-普通-Mock（Mock-参数传递的对象）" class="headerlink" title="1. 普通 Mock（Mock 参数传递的对象）"></a>1. 普通 Mock（Mock 参数传递的对象）</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callArgumentInstance</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallArgumentInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Mock 对象，也可以使用 org.mockito.Mock 注解标记来实现</span></span><br><span class="line">        File file = PowerMockito.mock(File.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 录制 Mock 对象行为</span></span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证方法行为</span></span><br><span class="line">        Assert.assertTrue(underTest.callArgumentInstance(file));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通 Mock 不需要加 <code>@RunWith</code> 和 <code>@PrepareForTest</code> 注解。</p><h2 id="2-Mock-方法内部-new-出来的对象"><a href="#2-Mock-方法内部-new-出来的对象" class="headerlink" title="2. Mock 方法内部 new 出来的对象"></a>2. Mock 方法内部 new 出来的对象</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callInternalInstance</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">       File file = <span class="keyword">new</span> File(path);</span><br><span class="line">       <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上需要添加注解 @PrepareForTest，注解里写的类是需要 Mock 的 new 对象代码所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallInternalInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = PowerMockito.mock(File.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当以参数为 bbb 创建 File 对象的时候，返回已经 Mock 的 File 对象。</span></span><br><span class="line">        PowerMockito.whenNew(File.class).withArguments(<span class="string">"bbb"</span>).thenReturn(file);</span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callInternalInstance(<span class="string">"bbb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Mock-普通对象的-final-方法"><a href="#3-Mock-普通对象的-final-方法" class="headerlink" title="3. Mock 普通对象的 final 方法"></a>3. Mock 普通对象的 final 方法</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callFinalMethod</span><span class="params">(ClassDependency refer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> refer.isAlive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上加注解 @PrepareForTest，注解里写的类是需要 Mock 的 final 方法所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallFinalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassDependency depencency = PowerMockito.mock(ClassDependency.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(depencency.isAlive()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callFinalMethod(depencency));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Mock-静态方法。"><a href="#4-Mock-静态方法。" class="headerlink" title="4. Mock 静态方法。"></a>4. Mock 静态方法。</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ClassDependency.isExist();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上加注解 @PrepareForTest，注解里写的类是需要 Mock 的 static 方法所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 表示需要 Mock 这个类里的静态方法</span></span><br><span class="line">        PowerMockito.mockStatic(ClassDependency.class);</span><br><span class="line">        PowerMockito.when(ClassDependency.isExist()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callStaticMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Mock-私有方法"><a href="#5-Mock-私有方法" class="headerlink" title="5. Mock 私有方法"></a>5. Mock 私有方法</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callPrivateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isExist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 在测试方法之上加注解 @PrepareForTest，注解里写的类是需要 Mock 的 private 方法所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest.class);</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(underTest.callPrivateMethod()).thenCallRealMethod();</span><br><span class="line">        PowerMockito.when(underTest, <span class="string">"isExist"</span>).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callPrivateMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-Mock-JDK-中类的静态、私有方法。"><a href="#6-Mock-JDK-中类的静态、私有方法。" class="headerlink" title="6. Mock JDK 中类的静态、私有方法。"></a>6. Mock JDK 中类的静态、私有方法。</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callSystemFinalMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callSystemStaticMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.getProperty(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span></span></span><br><span class="line"><span class="class">    @<span class="title">Test</span></span></span><br><span class="line"><span class="class">    // 和 <span class="title">Mock</span> 普通对象的 <span class="title">static</span>、<span class="title">final</span> 方法一样，只不过注解 @<span class="title">PrepareForTest</span> 里写的类不一样</span></span><br><span class="line"><span class="class">  // 注解里写的类是需要调用系统方法所在的类。</span></span><br><span class="line"><span class="class">    @<span class="title">PrepareForTest</span>(<span class="title">ClassUnderTest</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">testCallSystemFinalMethod</span>() </span>&#123;</span><br><span class="line">        String str = PowerMockito.mock(String.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(str.isEmpty()).thenReturn(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertFalse(underTest.callSystemFinalMethod(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallSystemStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(System.class);</span><br><span class="line">        PowerMockito.when(System.getProperty(<span class="string">"aaa"</span>)).thenReturn(<span class="string">"bbb"</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="string">"bbb"</span>, underTest.callSystemStaticMethod(<span class="string">"aaa"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Mock-依赖类中的方法（whenNew）"><a href="#7-Mock-依赖类中的方法（whenNew）" class="headerlink" title="7. Mock 依赖类中的方法（whenNew）"></a>7. Mock 依赖类中的方法（whenNew）</h2><p>测试对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callDependency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassDependency classDependency = <span class="keyword">new</span> ClassDependency();</span><br><span class="line">        <span class="keyword">return</span> classDependency.isGod(<span class="string">"hh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGod</span><span class="params">(String oh)</span></span>&#123;</span><br><span class="line">        System.out.println(oh);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须加注解 @PrepareForTest 和 @RunWith</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="comment">// 注解里写的类是依赖类所在的类。</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDependency</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line">        ClassDependency dependency = mock(ClassDependency.class);</span><br><span class="line"></span><br><span class="line">        whenNew(ClassDependency.class).withAnyArguments().thenReturn(dependency);</span><br><span class="line"></span><br><span class="line">        when(dependency.isGod(anyString())).thenReturn(<span class="keyword">true</span>);</span><br><span class="line">        Assert.assertTrue(underTest.callDependency());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-完整示例代码"><a href="#8-完整示例代码" class="headerlink" title="8. 完整示例代码"></a>8. 完整示例代码</h2><h3 id="测试目标类"><a href="#测试目标类" class="headerlink" title="测试目标类"></a>测试目标类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.enncloud.ceres.powermock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lixiangrong on 2017/7/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callArgumentInstance</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callInternalInstance</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">return</span> file.exists();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callFinalMethod</span><span class="params">(ClassDependency refer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> refer.isAlive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callSystemFinalMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ClassDependency.isExist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">callSystemStaticMethod</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.getProperty(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callPrivateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isExist();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callVoidPrivateMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        testVoid();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testVoid</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"do nothing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callDependency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassDependency classDependency = <span class="keyword">new</span> ClassDependency();</span><br><span class="line">        <span class="keyword">return</span> classDependency.isGod(<span class="string">"hh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖类"><a href="#依赖类" class="headerlink" title="依赖类"></a>依赖类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.enncloud.ceres.powermock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lixiangrong on 2017/7/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isGod</span><span class="params">(String oh)</span></span>&#123;</span><br><span class="line">        System.out.println(oh);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.enncloud.ceres.powermock.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.enncloud.ceres.powermock.ClassDependency;</span><br><span class="line"><span class="keyword">import</span> cn.enncloud.ceres.powermock.ClassUnderTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.powermock.api.mockito.PowerMockito;</span><br><span class="line"><span class="keyword">import</span> org.powermock.core.classloader.annotations.PrepareForTest;</span><br><span class="line"><span class="keyword">import</span> org.powermock.modules.junit4.PowerMockRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by lixiangrong on 2017/7/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestClassUnderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallArgumentInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        File file = PowerMockito.mock(File.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callArgumentInstance(file));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallInternalInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File file = PowerMockito.mock(File.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.whenNew(File.class).withArguments(<span class="string">"bbb"</span>).thenReturn(file);</span><br><span class="line">        PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callInternalInstance(<span class="string">"bbb"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallFinalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassDependency depencency = PowerMockito.mock(ClassDependency.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(depencency.isAlive()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callFinalMethod(depencency));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallSystemFinalMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = PowerMockito.mock(String.class);</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(str.isEmpty()).thenReturn(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertFalse(underTest.callSystemFinalMethod(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassDependency.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(ClassDependency.class);</span><br><span class="line">        PowerMockito.when(ClassDependency.isExist()).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callStaticMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallSystemStaticMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line"></span><br><span class="line">        PowerMockito.mockStatic(System.class);</span><br><span class="line">        PowerMockito.when(System.getProperty(<span class="string">"aaa"</span>)).thenReturn(<span class="string">"bbb"</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertEquals(<span class="string">"bbb"</span>, underTest.callSystemStaticMethod(<span class="string">"aaa"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest.class);</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(underTest.callPrivateMethod()).thenCallRealMethod();</span><br><span class="line">        PowerMockito.when(underTest, <span class="string">"isExist"</span>).thenReturn(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callPrivateMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallVoidPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest.class);</span><br><span class="line"></span><br><span class="line">        PowerMockito.when(underTest.callVoidPrivateMethod()).thenCallRealMethod();</span><br><span class="line">        PowerMockito.doNothing().when(underTest, <span class="string">"testVoid"</span>);</span><br><span class="line"></span><br><span class="line">        Assert.assertTrue(underTest.callVoidPrivateMethod());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@PrepareForTest</span>(ClassUnderTest.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDependency</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();</span><br><span class="line">        ClassDependency dependency = mock(ClassDependency.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @PrepareForTest(ClassUnderTest.class)</span></span><br><span class="line">        whenNew(ClassDependency.class).withAnyArguments().thenReturn(dependency);</span><br><span class="line"></span><br><span class="line">        when(dependency.isGod(anyString())).thenReturn(<span class="keyword">true</span>);</span><br><span class="line">        Assert.assertTrue(underTest.callDependency());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-Mock-与-Spy"><a href="#9-Mock-与-Spy" class="headerlink" title="9. Mock 与 Spy"></a>9. Mock 与 Spy</h2><p>Mock 不是真实的对象，它只是用类型的 class 创建了一个虚拟对象，并可以设置对象行为<br>Spy 是一个真实的对象，但它可以设置对象行为</p><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。如果我们写的代码依赖于某些模块对象，而单元测试过程中这些对象又很难手动创建，或者模块还没有开发完成，那么就使用一个虚拟的对象来完成单元测试，这就是所谓的 Mock。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Java 单元测试中比较流行的 Mock 测试框架有 &lt;a href=&quot;http://www.jmock.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jMock&lt;/a&gt;、&lt;a href=&quot;http://easymock.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;EasyMock&lt;/a&gt;、&lt;a href=&quot;https://github.com/mockito/mockito&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mockito&lt;/a&gt;，但是这些 Mock 工具都不能 Mock &lt;code&gt;static&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt; 方法等，而 &lt;a href=&quot;https://github.com/powermock/powermock&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PowerMock&lt;/a&gt; 能够做到。&lt;/p&gt;
&lt;p&gt;使用 PowerMock，首先需要使用 &lt;code&gt;@RunWith(PowerMockRunner.class)&lt;/code&gt; 将测试用例的 Runner 改为 &lt;code&gt;PowerMockRunner&lt;/code&gt;。如果要 Mock &lt;code&gt;static&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt; 等方法的时候，就需要加注解 &lt;code&gt;@PrepareForTest&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;PowerMock 有两个版本，一个是基于 EasyMock 实现的，另一个是基于 Mockito 实现的。&lt;/p&gt;
&lt;p&gt;下面我将以 PowerMock 的 Mockito 的版本来讲述如何使用 PowerMock。&lt;br&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="https://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://ehlxr.me/tags/Java/"/>
    
      <category term="Mock" scheme="https://ehlxr.me/tags/Mock/"/>
    
      <category term="Mockito" scheme="https://ehlxr.me/tags/Mockito/"/>
    
      <category term="PowerMock" scheme="https://ehlxr.me/tags/PowerMock/"/>
    
  </entry>
  
  <entry>
    <title>[转] Java 程序员的 Golang 入门笔记</title>
    <link href="https://ehlxr.me/2017/07/22/from-java-to-golang/"/>
    <id>https://ehlxr.me/2017/07/22/from-java-to-golang/</id>
    <published>2017-07-22T03:23:10.000Z</published>
    <updated>2017-11-08T03:38:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近抽空学习了一下 <code>Go</code> 语言，好多特性感觉非常棒，由于高效的开发效率以及性能，现在好多优秀的开源项目都是基于 <code>Go</code> 开发，比如 <code>Docker</code>、<code>etcd</code>、<code>consul</code>、<code>Kubernetes</code> 等。<code>Go</code> 势必会在互联网技术的服务化，容器化的将来大展拳脚。正好网上看到一篇关于 <code>Java</code> 程序员入门 <code>Golang</code> 的文章，写的挺好的，所以特此转载过来，再加上自己的一些学习经验，供大家参考。</p></blockquote><p><code>Golang</code> 从 <code>09</code> 年发布，中间经历了多个版本的演进，已经渐渐趋于成熟，其媲美于 <code>C</code> 语言的性能、<code>Python</code> 的开发效率，又被称为 21 世纪的 <code>C</code> 语言，尤其适合开发后台服务。这篇文章主要是介绍 <code>Golang</code> 的一些主要特性，和 <code>Java</code> 做一个对比，以便更好的理解 <code>Golang</code> 这门语言。</p><p>关于 <code>Golang</code> 环境的搭建就不讲了，可以参考 <a href="https://golang.org/doc/install" target="_blank" rel="noopener">官方文档</a> 或者大神 <a href="https://github.com/astaxie" target="_blank" rel="noopener">astaxie</a> 的开源书籍 <a href="https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.0.md" target="_blank" rel="noopener">build-web-application-with-golang</a> 的相关篇章。下面我没让你就从 <code>Go</code> 版本的<code>Hello World</code> 开始。</p><a id="more"></a><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p>每种语言都有自己的<code>Hello World</code>，<code>Go</code> 也不例外，<code>Go</code> 版本的如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World!你好，世界！"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用 <code>go run</code> 运行后，会在控制台终端看到 <code>Hello World!你好，世界！</code> 的输出。我们来看下这段代码：</p><ol><li><code>package</code> 是一个关键字，定义一个包，和 <code>Java</code> 里的 <code>package</code> 一样，也是模块化的关键。</li><li><code>main</code> 包是一个特殊的包名，它表示当前是一个可执行程序，而不是一个库。</li><li><code>import</code> 也是一个关键字，表示要引入的包，和 <code>Java</code> 的 <code>import</code> 关键字一样，引入后才可以使用它。</li><li><code>fmt</code> 是一个包名，这里表示要引入 <code>fmt</code> 这个包，这样我们就可以使用它的函数了。</li><li><code>main</code> 函数是主函数，表示程序执行的入口，<code>Java</code> 也有同名函数，但是多了一个<code>String[]</code> 类型的参数。</li><li><code>Println</code> 是 <code>fmt</code> 包里的函数，和 <code>Java</code> 里的 <code>System.out.println</code> 作用类似，这里输出一段文字。</li></ol><p>整段代码非常简洁，关键字、函数、包等和 <code>Java</code> 非常相似，不过注意，<code>go</code> 是不需要以 <code>;</code> (分号)结尾的。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><code>go</code> 语言变量的声明和 <code>java</code> 的略有不同，以声明一个 <code>int</code> 类型，变量名为 <code>age</code> 为例，<code>go</code> 语言变量生成如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> =<span class="number">10</span></span><br></pre></td></tr></table></figure><p>同样的变量，在 <code>java</code> 中的声明是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>可以看到 <code>go</code> 的变量声明，修饰变量的类型在变量的后面，而且是以 <code>var</code> 关键字开头。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 类型 = 表达式</span><br></pre></td></tr></table></figure><p>最后面的赋值可以在声明的时候忽略，这样变量就有一个默认的值，称之为 <code>零值</code>。<code>零值</code> 是一个统称，以类型而定，比如 <code>int</code> 类型的零值为 <code>0</code>，<code>string</code> 类型的零值是 <code>””</code> 空字符串。</p><p>在 <code>go</code> 中除了以 <code>var</code> 声明变量之外，还有一种简短的变量声明方式 <code>:=</code>,比如上面例子，可以如下简单声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age := <span class="number">10</span></span><br></pre></td></tr></table></figure><p>这种方式和上面的例子等价，但是少了 <code>var</code> 和变量类型，所以简短方便，用的多。使用这种方式，变量的类型由 <code>go</code> 根据值推导出来，比如这里默认是 <code>int</code>。</p><p>不过它有一个限制，那就是它只能用在函数内部；在函数外部使用则会无法编译通过，所以一般用 <code>var</code> 方式来定义全局变量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1, a2 <span class="keyword">string</span> = <span class="string">"1"</span>, <span class="string">"d"</span></span><br></pre></td></tr></table></figure><p><code>Go</code> 对于已声明但未使用的变量（局部变量）会在编译阶段报错</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>有了变量，就少不了常量，和 <code>var</code> 关键字不一样，<code>go</code> 的常量使用 <code>const</code> 声明，这个和 <code>C</code> 里的常量一样。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>这样就声明了一个常量 <code>age</code>，其值是 <code>10</code>，因为我们这里没有指定常量的类型，所以常量的类型是根据值推导出来的。所以等价的我们也可以指定常量类型，如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> age <span class="keyword">int</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>相比来说，<code>java</code> 下的常量定义就要复杂一些，要有 <code>static final</code> 修饰符，才是常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> <span class="keyword">int</span> AGE = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>这个和 <code>go</code> 的实现等价，但是它的定义修饰符比 <code>go</code> 多多了，而且常量类型不能省略。</p><h2 id="大小写标记访问权限"><a href="#大小写标记访问权限" class="headerlink" title="大小写标记访问权限"></a>大小写标记访问权限</h2><p>我们上面的 <code>go</code> 例子中我特意用了小些的变量名 <code>age</code>，甚至常量我也没有写成 <code>AGE</code>，但是在 <code>java</code> 中，对于常量我们的习惯是全部大些。</p><p>在 <code>go</code> 中不能随便使用大小写的问题，是因为大小写具有特殊意义，在 <code>go</code> 中，大些字母开头的变量或者函数等是 <code>public</code> 的，可以被其他包访问；小些的则是<code>private</code>的，不能被其他包访问到。这样就省去了 <code>public</code> 和 <code>private</code> 声明的烦恼，使代码变的更简洁。</p><p>特别说明，这些导出规则只适用于包级别名字定义，不能使函数内部的定义。</p><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包的规则和<code>java</code>很像，每个包都有自己独立的空间，所以可以用来做模块化，封装，组织代码等。<br>和<code>java</code>不同的是， <code>go</code> 的包里可以有函数，比如我们常用的<code>fmt.Println()</code>,但是在在<code>java</code>中没有这种用法，<code>java</code>的方法必须是属于一个类或者类的实例的。</p><p>要使用一个包，就需要先导入，使用<code>import</code>关键字，和<code>java</code>也一样，可以参见前面的<code>hello world</code>示例。</p><p>如果我们需要导入多个包的时候，可以像<code>java</code>一样，一行行导入，也可以使用快捷方式一次导入，这个是<code>java</code>所没有的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"io"</span></span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"strconv"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p> <code>go</code> 对于变量的类型有严格的限制，不同类型之间的变量不能进行赋值、表达式等操作，必须要要转换成同一类型才可以，比如<code>int32</code>和<code>int64</code>两种<code>int</code>类型的变量不能直接相加，要转换成一样才可以。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a <span class="keyword">int32</span> = <span class="number">13</span></span><br><span class="line"><span class="keyword">var</span> b <span class="keyword">int64</span> = <span class="number">20</span></span><br><span class="line">c := <span class="keyword">int64</span>(a) + b</span><br></pre></td></tr></table></figure><p>这种限制主要是防止我们误操作，导致一些莫名其妙的问题。在<code>java</code>中因为有自动转型的概念，所以可以不同类型的可以进行操作，比如<code>int</code>可以和<code>double</code>相加，<code>int</code>类型可以通过<code>+</code>和字符串拼接起来，这些在<code>go</code>中都是不可行的。</p><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map</code>类型，<code>Java</code>里是<code>Map</code>接口， <code>go</code> 里叫做字典，因为其常用，在 <code>go</code> 中，被优化为一个语言上支持的结构，原生支持，就像一个关键字一样，而不是<code>java</code>里的要使用内置的<code>sdk</code>集合库，比如<code>HashMap</code>等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ages := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">ages[<span class="string">"linday"</span>] = <span class="number">20</span></span><br><span class="line">ages[<span class="string">"michael"</span>] = <span class="number">30</span></span><br><span class="line">fmt.Print(ages[<span class="string">"michael"</span>])</span><br></pre></td></tr></table></figure><p> <code>go</code> 里要创建一个<code>map</code>对应，需要使用关键字<code>make</code>，然后就可以对这个<code>map</code>进行操作。</p><p><code>map</code>的结构也非常简单，符合KV模型，定义为<code>map[key]value</code>, 方括号里是<code>key</code>的类型，方括号外紧跟着对应的<code>value</code>的类型，这些明显和<code>Java</code>的<code>Map</code>接口不同。如果在 <code>go</code> 中我们要删除<code>map</code>中的一个元素怎么办？使用内置的<code>delete</code>函数就可以,如下代码删除<code>ages</code>这个<code>map</code>中，<code>key</code>为<code>michael</code>的元素。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">delete</span>(ages,<span class="string">"michael"</span>)</span><br></pre></td></tr></table></figure><p>如果我们想遍历<code>map</code>中的<code>K、V</code>值怎么办？答案是使用<code>range</code>风格的<code>for</code>循环，可比<code>Java Map</code>的遍历简洁多了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name,age := <span class="keyword">range</span> ages &#123;</span><br><span class="line">    fmt.Println(<span class="string">"name:"</span>,name,<span class="string">",age:"</span>,age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>range</code>一个<code>map</code>，会返回两个值，第一个是<code>key</code>，第二个是<code>value</code>，这个也是<code>go</code>多值返回的优势，下面会讲。</p><h2 id="函数方法"><a href="#函数方法" class="headerlink" title="函数方法"></a>函数方法</h2><p>在 <code>go</code> 中，函数和方法是不一样的，我们一般称包级别的(直接可以通过包调用的)称之为函数，比如<code>fmt.Println()；</code>把和一个类型关联起来的函数称之为方法，如下示例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> lib</span><br><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.name</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTime</span><span class="params">()</span> <span class="title">time</span>.<span class="title">Time</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>GetTime()</code>可以通过<code>lib.GetTime()</code>直接调用，称之为函数；而<code>GetName()</code>则属于<code>Person</code>这个结构体的函数，只能声明了<code>Person</code>类型的实例后才可以调用，称之为方法。</p><p>不管是函数还是方法，定义是一摸一样的。而在这里，最可以讲的就是多值返回，也就是可以同时返回多个值，这就大大为我们带来了方便，比如上个遍历<code>map</code>的例子，直接可以获取<code>K、V</code>，如果只能返回一个值，我们就需要调用两次方法才可以。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetTime</span><span class="params">()</span> <span class="params">(time.Time,error)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time.Now(),<span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多值返回也很简单，返回的值使用逗号隔开即可。如果要接受多值的返回，也需要以逗号分隔的变量，有几个返回值，就需要几个变量，比如这里：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now,err:=GetTime()</span><br></pre></td></tr></table></figure><p>如果有个返回值，我们用不到，不想浪费一个变量接收怎么办？这时候可以使用空标志符<code>_</code>,这是<code>java</code>没有的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">now,_:=GetTime()</span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p> <code>go</code> 的指针和<code>C</code>中的声明定义是一样的，其作用类似于<code>Java</code>引用变量效果。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> p *<span class="keyword">int</span> = &amp;age</span><br><span class="line">*p = <span class="number">11</span></span><br><span class="line">fmt.Println(age)</span><br></pre></td></tr></table></figure><p>其中<code>指针p</code>指向<code>变量age</code>的内存地址，如果修改<code>*p</code>的值，那么变量<code>age</code>的值也同时会被修改，例子中打印出来的值为<code>11</code>，而不是<code>10</code>.</p><p>相对应<code>java</code>引用类型的变量，可以理解为一个<code>HashMap</code>类型的变量，这个变量传递给一个方法，在该方法里对<code>HashMap</code>修改，删除，就会影响原来的<code>HashMap</code>。引用变量集合类最容易理解，自己的类也可以，不过基本类型不行，基本类型不是引用类型的，他们在方法传参的时候，是拷贝的值。</p><h2 id="结构体替代类"><a href="#结构体替代类" class="headerlink" title="结构体替代类"></a>结构体替代类</h2><p> <code>go</code> 中没有类型的概念，只有结构体，这个和<code>C</code>是一样的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">    age  <span class="keyword">int</span></span><br><span class="line">    name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>go</code> 中的结构体是不能定义方法的，只能是变量，这点和<code>Java</code>不一样的,如果要访问结构体内的成员变量，通过<code>.</code>操作符即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> p.name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是通过<code>.</code>操作符访问变量的方式，同时它也是一个为结构体定义方法的例子，和函数不一样的是，在<code>func</code>关键字后要执行该方法的接收者，这个方法就是属于这个接收者，例子中是<code>Person</code>这个结构体。</p><p>在 <code>go</code> 中如果想像<code>Java</code>一样，让一个结构体继承另外一个结构体怎么办？也有办法，不过在 <code>go</code> 中称之为组合或者嵌入。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">   age  <span class="keyword">int</span></span><br><span class="line">   name <span class="keyword">string</span></span><br><span class="line">   Address</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Address <span class="keyword">struct</span> &#123;</span><br><span class="line">    city <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构体<code>Address</code>被嵌入了<code>Person</code>中，这样<code>Person</code>就拥有了<code>Address</code>的变量和方法，就想自己的一样，这就是组合的威力。通过这种方式，我们可以把简单的对象组合成复杂的对象，并且他们之间没有强约束关系， <code>go</code> 倡导的是组合，而不是继承、多态。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p> <code>go</code> 的接口和<code>Java</code>类型，不过它不需要强制实现，在 <code>go</code> 中，如果你这个类型（基本类型，结构体等都可以）拥有了接口的所有方法，那么就默认为这个类型实现了这个接口，是隐式的，不需要和<code>java</code>一样，强制使用<code>implement</code>强制实现。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Stringer <span class="keyword">interface</span> &#123;</span><br><span class="line">    String() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"name is "</span>+p.name+<span class="string">",age is "</span>+strconv.Itoa(p.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例中可以看到，<code>Person</code>这个结构体拥有了<code>fmt.Stringer</code>接口的方法，那么就说明<code>Person</code>实现了<code>fmt.Stringer</code>接口。</p><p>接口也可以像结构体一样组合嵌套，这里不再赘述。</p><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p> <code>go</code> 并发主要靠<code>goroutine</code>支持，也称之为<code>go协程</code>或者<code>go程</code>，他是语言层面支持的，非常轻量级的多任务支持，也可以把他简单的理解为<code>java</code>语言的线程，不过是不一样的。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">go</span> run()</span><br></pre></td></tr></table></figure><p>这就启动一个<code>goroutine</code>来执行<code>run</code>函数，代码非常简洁，如果在<code>java</code>中，需要先<code>New</code>一个<code>Thread</code>，然后在重写他的<code>run</code>方法，然后在<code>start</code>才可以开始。</p><p>两个<code>goroutine</code>可以通过<code>channel</code>来通信，<code>channel</code>是一个特殊的类型，也是 <code>go</code> 语言级别上的支持，他类似于一个管道，可以存储信息，也可以从中读取信息。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    result:=<span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        sum:=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++&#123;</span><br><span class="line">            sum=sum+i</span><br><span class="line">        &#125;</span><br><span class="line">        result&lt;-sum</span><br><span class="line">    &#125;()</span><br><span class="line">    fmt.Print(&lt;-result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上示例使用一个单独的<code>goroutine</code>求和，当得到结果时，存放在<code>result</code>这个<code>chan</code>里，然后供 <code>main</code> <code>goroutine</code> 读取出来。当<code>result</code>没有被存储值的时候，读取<code>result</code>是阻塞的，所以会等到结果返回，协同工作，通过<code>chan</code>通信。</p><p>对于并发， <code>go</code> 还提供了一套同步机制，都在<code>sync</code>包里，有锁，有一些常用的工具函数等，和<code>java</code>的<code>concurrent</code>框架差不多。</p><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><p>相比<code>java</code>的<code>Exception</code>来说， <code>go</code> 有两种机制，不过最常用的还是<code>error</code>错误类型，<code>panic</code>只用于严重的错误。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> error <span class="keyword">interface</span> &#123;</span><br><span class="line">    Error() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>go</code> 内置的<code>error</code>类型非常简洁，只用实现<code>Error</code>方法即可，可以打印一些详细的错误信息，比如常见的函数多值返回，最后一个返回值经常是<code>error</code>，用于传递一些错误问题，这种方式要比<code>java</code> <code>throw Exception</code>的方法更优雅。</p><h2 id="Defer代替finally"><a href="#Defer代替finally" class="headerlink" title="Defer代替finally"></a>Defer代替finally</h2><p> <code>go</code> 中没有<code>java</code>的<code>finally</code>了，那么如果我们要关闭一些一些连接，文件流等怎么办呢，为此<code>go</code>为我们提供了<code>defer</code>关键字，这样就可以保证永远被执行到，也就不怕关闭不了连接了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f,err:=os.Open(filename)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">readAll(f)</span><br></pre></td></tr></table></figure><h2 id="统一编码风格"><a href="#统一编码风格" class="headerlink" title="统一编码风格"></a>统一编码风格</h2><p>在编码中，我们有时为了是否空行，大括号是否独占一行等编码风格问题争论不休，到了 <code>go</code> 这里就终止了，因为 <code>go</code> 是强制的，比如花括号不能独占一行，比如定义的变量必须使用，否则就不能编译通过。</p><p>第二种就是<code>go fmt</code>这个工具提供的非强制性规范，虽然不是强制的，不过也建议使用，这样整个团队的代码看着就像一个人写的。很多 <code>go</code> 代码编辑器都提供保存时自动<code>gofmt</code>格式的话，所以效率也非常高。</p><h2 id="便捷的部署"><a href="#便捷的部署" class="headerlink" title="便捷的部署"></a>便捷的部署</h2><p> <code>go</code> 最终生成的是一个可执行文件，不管你的程序依赖多少库，都会被打包进行，生成一个可执行文件，所以相比<code>java</code>庞大的<code>jar</code>库来说，他的部署非常方便，执行运行这个可执行文件就好了。</p><p>对于<code>Web</code>开发，更方便，不用安装<code>jdk</code>，<code>tomcat</code>容器等等这些环境，直接一个可执行文件，就启动了。对于 <code>go</code> 这种便捷的部署方式，我觉得他更能推进<code>docker</code>的服务化，因为<code>docker</code>就是倡导一个实例一个服务，而且不用各种依赖，<code>layer</code>层级又没那么多，<code>docker image</code>也会小很多。</p><p>最后， <code>go</code> 目前已经在<code>TIOBE</code>语言排行榜上名列<code>13</code>名了，上升速度还是非常快的，而且随着服务化，容器化，他的优势会越来越多的显现出来，得到更广泛的应用。</p><p>如果你感兴趣，那么开始吧，提前准备，机会来的时候，就不会错过了。</p><hr><p><a href="http://www.flysnow.org/2016/12/28/from-java-to-golang.html" target="_blank" rel="noopener">原文出处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近抽空学习了一下 &lt;code&gt;Go&lt;/code&gt; 语言，好多特性感觉非常棒，由于高效的开发效率以及性能，现在好多优秀的开源项目都是基于 &lt;code&gt;Go&lt;/code&gt; 开发，比如 &lt;code&gt;Docker&lt;/code&gt;、&lt;code&gt;etcd&lt;/code&gt;、&lt;code&gt;consul&lt;/code&gt;、&lt;code&gt;Kubernetes&lt;/code&gt; 等。&lt;code&gt;Go&lt;/code&gt; 势必会在互联网技术的服务化，容器化的将来大展拳脚。正好网上看到一篇关于 &lt;code&gt;Java&lt;/code&gt; 程序员入门 &lt;code&gt;Golang&lt;/code&gt; 的文章，写的挺好的，所以特此转载过来，再加上自己的一些学习经验，供大家参考。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Golang&lt;/code&gt; 从 &lt;code&gt;09&lt;/code&gt; 年发布，中间经历了多个版本的演进，已经渐渐趋于成熟，其媲美于 &lt;code&gt;C&lt;/code&gt; 语言的性能、&lt;code&gt;Python&lt;/code&gt; 的开发效率，又被称为 21 世纪的 &lt;code&gt;C&lt;/code&gt; 语言，尤其适合开发后台服务。这篇文章主要是介绍 &lt;code&gt;Golang&lt;/code&gt; 的一些主要特性，和 &lt;code&gt;Java&lt;/code&gt; 做一个对比，以便更好的理解 &lt;code&gt;Golang&lt;/code&gt; 这门语言。&lt;/p&gt;
&lt;p&gt;关于 &lt;code&gt;Golang&lt;/code&gt; 环境的搭建就不讲了，可以参考 &lt;a href=&quot;https://golang.org/doc/install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt; 或者大神 &lt;a href=&quot;https://github.com/astaxie&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;astaxie&lt;/a&gt; 的开源书籍 &lt;a href=&quot;https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.0.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;build-web-application-with-golang&lt;/a&gt; 的相关篇章。下面我没让你就从 &lt;code&gt;Go&lt;/code&gt; 版本的&lt;code&gt;Hello World&lt;/code&gt; 开始。&lt;/p&gt;
    
    </summary>
    
      <category term="Golang" scheme="https://ehlxr.me/categories/Golang/"/>
    
    
      <category term="Java" scheme="https://ehlxr.me/tags/Java/"/>
    
      <category term="Golang" scheme="https://ehlxr.me/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>[转] Git查看、删除、重命名远程分支和tag</title>
    <link href="https://ehlxr.me/2017/06/15/%E8%BD%AC-Git%E6%9F%A5%E7%9C%8B%E3%80%81%E5%88%A0%E9%99%A4%E3%80%81%E9%87%8D%E5%91%BD%E5%90%8D%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E5%92%8Ctag/"/>
    <id>https://ehlxr.me/2017/06/15/转-Git查看、删除、重命名远程分支和tag/</id>
    <published>2017-06-15T02:18:29.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看远程分支"><a href="#查看远程分支" class="headerlink" title="查看远程分支"></a>查看远程分支</h2><p>加上 <code>-a</code> 参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"> master</span><br><span class="line"> remote</span><br><span class="line"> tungway</span><br><span class="line"> v1.52</span><br><span class="line">* zrong</span><br><span class="line"> remotes/origin/master</span><br><span class="line"> remotes/origin/tungway</span><br><span class="line"> remotes/origin/v1.52</span><br><span class="line"> remotes/origin/zrong</span><br></pre></td></tr></table></figure><h2 id="删除远程分支和-tag"><a href="#删除远程分支和-tag" class="headerlink" title="删除远程分支和 tag"></a>删除远程分支和 <code>tag</code></h2><p>在 <code>Git v1.7.0</code> 之后，可以使用这种语法删除远程分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete &lt;branchName&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>删除 <code>tag</code> 这么用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>否则，可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin :&lt;branchName&gt;</span><br></pre></td></tr></table></figure><p>这是删除 <code>tag</code> 的方法，推送一个空 <code>tag</code> 到远程 <code>tag</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line">git push origin :refs/tags/&lt;tagname&gt;</span><br></pre></td></tr></table></figure><p>两种语法作用完全相同。</p><h2 id="删除不存在对应远程分支的本地分支"><a href="#删除不存在对应远程分支的本地分支" class="headerlink" title="删除不存在对应远程分支的本地分支"></a>删除不存在对应远程分支的本地分支</h2><p>假设这样一种情况：</p><ol><li>我创建了本地分支 <code>b1</code> 并 pull 到远程分支 <code>origin/b1</code>；</li><li>其他人在本地使用 <code>fetch</code> 或 <code>pull</code> 创建了本地的 <code>b1</code> 分支；</li><li>我删除了 <code>origin/b1</code> 远程分支；</li><li>其他人再次执行 <code>fetch</code> 或者 <code>pull</code> 并不会删除这个他们本地的 <code>b1</code> 分支，运行 <code>git branch -a</code> 也不能看出这个 <code>branch</code> 被删除了，如何处理？</li></ol><p>使用下面的代码查看 <code>b1</code> 的状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote show origin</span></span><br><span class="line">* remote origin</span><br><span class="line"> Fetch URL: git@github.com:xxx/xxx.git</span><br><span class="line"> Push  URL: git@github.com:xxx/xxx.git</span><br><span class="line"> HEAD branch: master</span><br><span class="line"> Remote branches:</span><br><span class="line">   master                 tracked</span><br><span class="line">   refs/remotes/origin/b1 stale (use 'git remote prune' to remove)</span><br><span class="line"> Local branch configured for 'git pull':</span><br><span class="line">   master merges with remote master</span><br><span class="line"> Local ref configured for 'git push':</span><br><span class="line">   master pushes to master (up to date)</span><br></pre></td></tr></table></figure><p>这时候能够看到 <code>b1</code> 是 <code>stale</code> 的，使用 <code>git remote prune origin</code> 可以将其从本地版本库中去除。</p><p>更简单的方法是使用这个命令，它在 <code>fetch</code> 之后删除掉没有与远程分支对应的本地分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h2 id="重命名远程分支"><a href="#重命名远程分支" class="headerlink" title="重命名远程分支"></a>重命名远程分支</h2><p>在 <code>git</code> 中重命名远程分支，其实就是先删除远程分支，然后重命名本地分支，再重新提交一个远程分支。</p><p>例如下面的例子中，我需要把 <code>devel</code> 分支重命名为 <code>develop</code> 分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -av</span></span><br><span class="line">* devel                             752bb84 Merge pull request #158 from Gwill/devel</span><br><span class="line"> master                            53b27b8 Merge pull request #138 from tdlrobin/master</span><br><span class="line"> zrong                             2ae98d8 modify CCFileUtils, export getFileData</span><br><span class="line"> remotes/origin/HEAD               -&gt; origin/master</span><br><span class="line"> remotes/origin/add_build_script   d4a8c4f Merge branch 'master' into add_build_script</span><br><span class="line"> remotes/origin/devel              752bb84 Merge pull request #158 from Gwill/devel</span><br><span class="line"> remotes/origin/devel_qt51         62208f1 update .gitignore</span><br><span class="line"> remotes/origin/master             53b27b8 Merge pull request #138 from tdlrobin/master</span><br><span class="line"> remotes/origin/zrong              2ae98d8 modify CCFileUtils, export getFileData</span><br></pre></td></tr></table></figure><p>删除远程分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --delete origin devel</span></span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line">- [deleted]         devel</span><br></pre></td></tr></table></figure><p>重命名本地分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m devel develop</span><br></pre></td></tr></table></figure><p>推送本地分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin develop</span></span><br><span class="line">Counting objects: 92, done.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (48/48), done.</span><br><span class="line">Writing objects: 100% (58/58), 1.38 MiB, done.</span><br><span class="line">Total 58 (delta 34), reused 12 (delta 5)</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line">* [new branch]      develop -&gt; develop</span><br></pre></td></tr></table></figure><p>然而，在 <code>github</code> 上操作的时候，我在删除远程分支时碰到这个错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push --delete origin devel</span></span><br><span class="line">remote: error: refusing to delete the current branch: refs/heads/devel</span><br><span class="line">To git@github.com:zrong/quick-cocos2d-x.git</span><br><span class="line">! [remote rejected] devel (deletion of the current branch prohibited)</span><br><span class="line">error: failed to push some refs to 'git@github.com:zrong/quick-cocos2d-x.git'</span><br></pre></td></tr></table></figure><p>这是由于在 <code>github</code> 中，<code>devel</code> 是项目的默认分支。要解决此问题，这样操作：</p><ol><li>进入 <code>github</code> 中该项目的 <code>Settings</code> 页面；</li><li>设置 <code>Default Branch</code> 为其他的分支（例如：<code>master</code>）；</li><li>重新执行删除远程分支命令。</li></ol><h2 id="把本地-tag-推送到远程"><a href="#把本地-tag-推送到远程" class="headerlink" title="把本地 tag 推送到远程"></a>把本地 <code>tag</code> 推送到远程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="获取远程-tag"><a href="#获取远程-tag" class="headerlink" title="获取远程 tag"></a>获取远程 <code>tag</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin tag &lt;tagname&gt;</span><br></pre></td></tr></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote" target="_blank" rel="noopener">https://makandracards.com/makandra/621-git-delete-a-branch-local-or-remote</a></li><li><a href="http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github" target="_blank" rel="noopener">http://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-both-locally-and-in-github</a></li><li><a href="http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html" target="_blank" rel="noopener">http://www.cnblogs.com/deepnighttwo/archive/2011/06/18/2084438.html</a></li><li><a href="http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch" target="_blank" rel="noopener">http://stackoverflow.com/questions/14040754/deleting-remote-master-branch-refused-due-to-being-current-branch</a></li><li><a href="http://weli.iteye.com/blog/1441582" target="_blank" rel="noopener">http://weli.iteye.com/blog/1441582</a></li></ul><hr><p><a href="http://zengrong.net/post/1746.htm" target="_blank" rel="noopener">原文出处</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;查看远程分支&quot;&gt;&lt;a href=&quot;#查看远程分支&quot; class=&quot;headerlink&quot; title=&quot;查看远程分支&quot;&gt;&lt;/a&gt;查看远程分支&lt;/h2&gt;&lt;p&gt;加上 &lt;code&gt;-a&lt;/code&gt; 参数可以查看远程分支，远程分支会用红色表示出来（如果你开了颜色支持的话）：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git branch -a&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; remote&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; tungway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; v1.52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* zrong&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; remotes/origin/master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; remotes/origin/tungway&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; remotes/origin/v1.52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; remotes/origin/zrong&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;删除远程分支和-tag&quot;&gt;&lt;a href=&quot;#删除远程分支和-tag&quot; class=&quot;headerlink&quot; title=&quot;删除远程分支和 tag&quot;&gt;&lt;/a&gt;删除远程分支和 &lt;code&gt;tag&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;在 &lt;code&gt;Git v1.7.0&lt;/code&gt; 之后，可以使用这种语法删除远程分支：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; git push origin --delete &amp;lt;branchName&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Git" scheme="https://ehlxr.me/categories/Git/"/>
    
    
      <category term="Git" scheme="https://ehlxr.me/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>占用端口、PID 查询总结</title>
    <link href="https://ehlxr.me/2017/05/24/%E5%8D%A0%E7%94%A8%E7%AB%AF%E5%8F%A3%E3%80%81PID-%E6%9F%A5%E8%AF%A2%E6%80%BB%E7%BB%93/"/>
    <id>https://ehlxr.me/2017/05/24/占用端口、PID-查询总结/</id>
    <published>2017-05-24T02:45:20.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总结一下日常工作学习中常用的查询占用端口、PID相关命令。主要有命令 ps、lsof、netstat 等命令。</p></blockquote><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><p><code>ps -ef</code> 或者 <code>ps aux</code></p><p>根据命令（IntelliJIDEALicenseServer）搜索 PID（17107）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -ef | grep IntelliJIDEALicenseServer | grep -v <span class="string">"grep"</span></span></span><br><span class="line">  501 17017 12203   0 10:01上午 ttys000    0:00.02 IntelliJIDEALicenseServer -p 21014</span><br></pre></td></tr></table></figure><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>根据 PID（17107）搜索占用端口（21014）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -p 17017 -nP | grep TCP</span><br><span class="line">COMMAND     PID  USER   FD     TYPE             DEVICE SIZE/OFF    NODE NAME</span><br><span class="line">IntelliJI 17017 ehlxr    3u    IPv4 0xc0df10496212b0e3      0t0     TCP *:21014 (LISTEN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line">$ lsof -nP -iTCP -sTCP:LISTEN | grep 17017</span><br></pre></td></tr></table></figure><blockquote><ul><li>-n 表示不显示主机名</li><li>-P 表示不显示端口俗称</li></ul></blockquote><a id="more"></a><p>根据端口（21014）搜索  PID（17107）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ lsof -i:21014</span><br><span class="line">COMMAND     PID  USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">IntelliJI 17017 ehlxr    3u  IPv4 0xc0df10496212b0e3      0t0  TCP *:21014 (LISTEN)</span><br></pre></td></tr></table></figure><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p><strong>仅 Linux 系统下好使，Mac 下无效</strong></p><p>端口（21017），PID（1847）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ netstat -antlp | grep IntelliJIDEA             </span><br><span class="line">tcp        0      0 0.0.0.0:21017           0.0.0.0:*               LISTEN      1847/./IntelliJIDEA</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;总结一下日常工作学习中常用的查询占用端口、PID相关命令。主要有命令 ps、lsof、netstat 等命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ps&quot;&gt;&lt;a href=&quot;#ps&quot; class=&quot;headerlink&quot; title=&quot;ps&quot;&gt;&lt;/a&gt;ps&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ps -ef&lt;/code&gt; 或者 &lt;code&gt;ps aux&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;根据命令（IntelliJIDEALicenseServer）搜索 PID（17107）&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; ps -ef | grep IntelliJIDEALicenseServer | grep -v &lt;span class=&quot;string&quot;&gt;&quot;grep&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  501 17017 12203   0 10:01上午 ttys000    0:00.02 IntelliJIDEALicenseServer -p 21014&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;lsof&quot;&gt;&lt;a href=&quot;#lsof&quot; class=&quot;headerlink&quot; title=&quot;lsof&quot;&gt;&lt;/a&gt;lsof&lt;/h2&gt;&lt;p&gt;根据 PID（17107）搜索占用端口（21014）&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ lsof -p 17017 -nP | grep TCP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;COMMAND     PID  USER   FD     TYPE             DEVICE SIZE/OFF    NODE NAME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IntelliJI 17017 ehlxr    3u    IPv4 0xc0df10496212b0e3      0t0     TCP *:21014 (LISTEN)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或者使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ lsof -nP -iTCP -sTCP:LISTEN | grep 17017&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;-n 表示不显示主机名&lt;/li&gt;
&lt;li&gt;-P 表示不显示端口俗称&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="Mac" scheme="https://ehlxr.me/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Linux 操作笔记</title>
    <link href="https://ehlxr.me/2017/04/14/Linux-%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/"/>
    <id>https://ehlxr.me/2017/04/14/Linux-操作笔记/</id>
    <published>2017-04-14T03:18:41.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头，记录一下日常工作学习中常使用的 Linux 命令。</p></blockquote><h1 id="安装磁盘分配"><a href="#安装磁盘分配" class="headerlink" title="安装磁盘分配"></a>安装磁盘分配</h1><ul><li><code>/boot</code> 用来存放与 Linux 系统启动有关的程序，比如启动引导装载程序等，建议大小为 100MB。</li><li><code>swap</code> 实现虚拟内存，建议大小是物理内存的1~2倍。</li><li><code>/</code> Linux系统的根目录，所有的目录都挂在这个目录下面，建议大小为5GB以上。</li><li><code>/home</code> 存放普通用户的数据，是普通用户的宿主目录，建议大小为剩下的空间。</li></ul><h1 id="系统目录结构"><a href="#系统目录结构" class="headerlink" title="系统目录结构"></a>系统目录结构</h1><ul><li><code>/</code>：存放系统程序，也就是 At&amp;t 开发的 Unix 程序。</li><li><code>/usr</code>：存放 Unix 系统商（比如 IBM 和 HP）开发的程序。</li><li><code>/usr/local</code>：存放用户自己安装的程序。</li><li><code>/opt</code>：在某些系统，用于存放第三方厂商开发的程序，所以取名为 option，意为 “选装”。</li></ul><a id="more"></a><h1 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h1><ul><li><code>ls</code> 列出当前目录下的文件 <code>ls ser*</code> 查找 ser 打头的文件</li><li><code>ls -l</code> （简化为：<code>ll</code>）列出当前目录下文件的详细信息</li><li><code>ls -a</code> 列出当前目录下的所有文件（包括隐藏文件）</li><li><code>ls -t</code> 依时间排序，而不是用档名</li><li><code>ls -S</code> 依大小排序，<code>ls -Sr</code> 按大小倒序</li><li><code>ls --full-time</code> 以完整时间模式 (包含年、月、日、时、分) 输出（ Mac 是 <code>ls -T</code>）</li><li><code>ll -d</code> 查看当前目录的详细信息</li><li><code>ll -a</code> 详细列出当前目录下的所有文件</li><li><code>ll 路径</code> 列出指定路径（可为相对或绝对路径）下的文件</li><li><code>ll -d 路径</code> 查看指定路径的详细信息</li><li>打开文件夹：<code>cd 路径</code><ul><li><code>cd /etc （相对路径）</code> 或 <code>cd xxx（绝对路径）</code></li><li>返回上一级目录：<code>cd ..</code></li></ul></li><li>查看当前目录：<code>pwd</code>（path where dir）</li><li>查看当前用户：<code>whoami</code></li><li>切换用户：<code>su -用户名</code> 或者 <code>su 用户名</code>（从其他用户切换到 root 用户需要密码，从 root 用户切换到任何其他用户不需要密码） <ul><li>切换到 root 用户：su</li><li>切换到 root 用户后使用命令：exit 切换到普通用户</li></ul></li><li>清屏：<code>clear</code> 或者 <code>Ctrl + L</code></li><li>关机：<code>halt</code> 或者 <code>shutdown -h now</code></li><li>修改密码：修改 root 自己的密码，直接输入 <code>passwd</code>，输入两遍新密码即可。若修改其他用户，如 oracle 的密码，可直接输入 <code>passwd oracle</code>，输入两遍性新密码即可。</li><li>查看系统编码：<code>locale</code></li><li>获取权限：<code>chmod 777 文件名</code></li><li>检索（例如检索 profile）：<code>ls -l | grep profile</code></li><li>文件拖拽软件安装：<code>yum install lrzsz</code></li><li>查看进程：<code>ps -ef</code>、<code>ps auxf</code></li><li>查看端口：<code>netstat -antlp | grep xx</code></li><li>查看资源占用情况：<code>top</code>（<code>Shit + &gt;</code> 切换排序列）</li><li>查看内存：<code>free -m/g</code></li><li>查看目录大小：<code>du -sh /opt/registry</code></li><li>修改配置文件后立即生效：<code>sysctl -p</code></li><li>查看系统环境变量：<code>env</code></li><li><code>dirname</code> 用于取指定路径所在的目录，如：<code>dirname /home/ikidou</code>，结果为：<code>/home</code></li><li><code>cd dirname $0</code>：一般用户 Shell 脚本中，切换到执行脚本所在的目录</li><li><code>tee</code>：在执行 Linux 命令时，我们可以把输出重定向到文件中，比如 <code>ls &gt; a.txt</code>，这时我们就不能看到输出了，如果我们既想把输出保存到文件中，又想在屏幕上看到输出内容，就可以使用 <code>tee</code> 命令</li><li><code>tree</code>：树形查看当前目录结构</li><li>系统负载查看：<code>uptime</code>、<code>w</code>、<code>top</code> 命令 <ul><li>“load average”，它的意思是 “系统的平均负荷”，里面有三个数字表示 1分钟、5分钟、15分钟内系统的平均负荷。</li></ul></li><li>列出谁在使用 3306 端口：<code>lsof -i:3306</code></li></ul><h1 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h1><p>路径（绝对路径、相对路径）</p><ul><li>创建文件夹：<code>mkdir [路径] + 文件夹</code><ul><li><code>mkdir [路径] + 文件夹1 [路径] + 文件夹2</code>（可以同时创建多个文件夹，空格隔开）</li><li><code>mkdir -p [路径]/[路径]</code> (创建多层级目录)</li></ul></li><li>创建文件：<code>touch [路径] + 文件名</code><ul><li><code>touch [路径] + 文件名1 [路径] + 文件名2</code>（可以同时创建多个文件，空格隔开）</li></ul></li><li><p>如何区分是文件夹还是文件： </p><p><img src="/images/post/20170414001.png" alt=""></p></li><li>删除（remove）文件：<code>rm [路径] + 文件名</code> （可以删除多个文件，每个文件用空格隔开） <ul><li>删除文件夹：<code>rm -r 文件夹1 文件夹2</code>（递归 recursive 删除文件夹1和文件夹2下的所有内容，每删除一个会提示）</li><li><code>rm -rf 文件夹</code>（强制 force 删除文件夹下的所有内容，不提示删除）删除后无法还原</li><li>删除文件夹或者： <code>rmdir 文件夹</code>（文件夹必须为空）</li><li>删除所有内容：<code>rm -rf *</code></li></ul></li><li>复制（copy）文件：<code>cp 源文件 目标文件夹</code>（正常情况下使用绝对路径） -复制文件夹：<code>cp -r 源文件 目标文件夹</code></li><li>移动（move）文件：<code>mv 源文件 目标文件夹</code>（正常情况下使用绝对路径） <ul><li>移动文件夹：<code>mv 源文件夹 目标文件夹</code></li><li>重命名：<code>mv aa.txt aaaa.txt</code></li></ul></li></ul><h1 id="文件读写命令"><a href="#文件读写命令" class="headerlink" title="文件读写命令"></a>文件读写命令</h1><ul><li><code>echo &quot;Hello World&quot; &gt;&gt; a.txt</code> 将字符串 Hello World <code>追加</code>到文件 a.txt 中。 <ul><li><code>echo &quot;Hello World&quot; &gt; a.txt</code> 将文件 a.txt 中的内容<code>替换</code>为字符串 Hello World。</li></ul></li><li>查看文件内容：<code>cat a.txt</code><ul><li><code>more services</code> 分页查看 services 文件中的内容，按空格或 f 切换下一页，回车下一行,q 退出。（文件内容较多时使用）</li><li><code>head services</code> 查看 services 文件前 10 行的内容（默认前 10 行） <code>head -20 services</code> （前20行的内容）</li><li><code>tail services</code> 查看 services 文件结尾 10 行的内容 <code>tail -20f services</code>（滚动显示结尾 20 行的内容）</li><li><code>vi/vim services</code> vi 可以修改文件</li></ul></li><li>文件链接：<code>ln 文件 链接</code> 修改源文件或者链接文件，两者同时更新 <ul><li><code>ln -s /test/a.txt /test/as.txt</code> 软链接 as.txt 就是针对 a.txt 的软链接（类似如 windows 的快捷方式）a.txt 删除后，as.txt无效</li><li><code>ln /test/a.txt /test/ah.txt</code> 硬链接 a.txt 删除后 ah.txt 仍然有效</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头，记录一下日常工作学习中常使用的 Linux 命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装磁盘分配&quot;&gt;&lt;a href=&quot;#安装磁盘分配&quot; class=&quot;headerlink&quot; title=&quot;安装磁盘分配&quot;&gt;&lt;/a&gt;安装磁盘分配&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/boot&lt;/code&gt; 用来存放与 Linux 系统启动有关的程序，比如启动引导装载程序等，建议大小为 100MB。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt; 实现虚拟内存，建议大小是物理内存的1~2倍。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; Linux系统的根目录，所有的目录都挂在这个目录下面，建议大小为5GB以上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home&lt;/code&gt; 存放普通用户的数据，是普通用户的宿主目录，建议大小为剩下的空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;系统目录结构&quot;&gt;&lt;a href=&quot;#系统目录结构&quot; class=&quot;headerlink&quot; title=&quot;系统目录结构&quot;&gt;&lt;/a&gt;系统目录结构&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;：存放系统程序，也就是 At&amp;amp;t 开发的 Unix 程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr&lt;/code&gt;：存放 Unix 系统商（比如 IBM 和 HP）开发的程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local&lt;/code&gt;：存放用户自己安装的程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt&lt;/code&gt;：在某些系统，用于存放第三方厂商开发的程序，所以取名为 option，意为 “选装”。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Poker 机械键盘入手记</title>
    <link href="https://ehlxr.me/2017/04/09/Poker-%E6%9C%BA%E6%A2%B0%E9%94%AE%E7%9B%98%E5%85%A5%E6%89%8B%E8%AE%B0/"/>
    <id>https://ehlxr.me/2017/04/09/Poker-机械键盘入手记/</id>
    <published>2017-04-09T08:49:50.000Z</published>
    <updated>2017-11-28T09:57:38.474Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个码农，天天和键盘打交道，没有一款称心如意的键盘怎么能行了？要说那一款键盘堪称神器，我想大多数程序员首推 HHKB ，怎奈囊中羞涩，只能找一款 HHKB 的替代品，于是，Poker 浮现我的眼中，经济实惠，小巧玲珑，深得我心…</p><p>关注这款键盘其实很久了，虽说相对于 HHKB 来说便宜很多，但也有点儿心疼，迟迟没能入手。最近过生日，女朋友很民主的征求我的意见，问我想要什么礼物，嘿嘿</p><a id="more"></a><p>昨天下午京东入手，399 大洋，白色茶轴，今天上午就到了，嘻嘻！</p><h1 id="先来两张，亮亮相！"><a href="#先来两张，亮亮相！" class="headerlink" title="先来两张，亮亮相！"></a>先来两张，亮亮相！</h1><p>包装盒，”The keyboard to cheer you up“，简洁、大气！</p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjovv60j22fm0zdjtr.jpg" alt="1"></p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjox8goj22io0y2acx.jpg" alt="2"></p><p>PBT 材质的键帽手感棒棒的！</p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjoxyf6j22io1w0aeg.jpg" alt="3"></p><p>带了六个键帽，换上之后的效果。有没有显得很有灵气(女朋友反而觉得还是全白色的好看)</p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjoxqlgj22io0v5dir.jpg" alt="4"></p><p>真的很小，都不够一个手的宽度，长度比 MBP 自带键盘稍长一点。</p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjp0ithj22io17p0xb.jpg" alt="5"></p><p>ikbc 正品，妥妥的！</p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjotb0cj20qa0ecmyt.jpg" alt="6"></p><h1 id="修改键位"><a href="#修改键位" class="headerlink" title="修改键位"></a>修改键位</h1><p>键盘的背面有 4 个拨动开关的，他们的功能分别是：</p><ul><li>开关 1：Caps 与左 Win 切换</li><li>开关 2：右 Ctrl 与 ` ~ 切换</li><li>开关 3：左 Win 与 Fn 切换</li><li>开关 4：键盘写保护，键位编程</li></ul><p>这是默认的键盘布局：</p><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjot7gbj20m807r75x.jpg" alt="7"></p><ol><li>将开关 1 和 3 都拨到 ON 的位置，效果：Caps 变成了 Fn，左 Win 变成了 Caps，右 Fn 还是 Fn</li><li>打开 Mac 的系统偏好设置，在键盘的修饰键修改中，选择 Poker</li><li>更改修饰键，如下：<ul><li>Caps Lock -&gt; Option</li><li>Control -&gt; Control</li><li>Option -&gt; Command</li><li>Command -&gt; Option<br><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjp23nsj20v60r4tf7.jpg" alt="8"></li></ul></li><li>搞定，然后用拔键器把左侧的 Alt 和 Win 键帽互换个位置，这样就更接近 Mac 的标准布局了。</li></ol><p><img src="https://ws1.sinaimg.cn/large/687148dbly1flxxjpfxp2j20m807rwjk.jpg" alt="9"></p><p>这样，左手按住 Fn + w、s、a、d 方便的实现上、下、左、右的操作了。</p><p>其实还有个方便使用方向键的方法，按一下<code>fn</code> + <code>空格</code>， <code>w</code>, <code>a</code>, <code>s</code>, <code>d</code>就是方向键了，再按一次则恢复到基本模式。</p><p>唯一的问题就是现在 <code>Caps Lock</code> 键消失了，只不过不常用。后期可以研究一下如何通过编程的方式实现其他组合键。</p><hr><p>参考：</p><p><a href="https://segmentfault.com/a/1190000000585559" target="_blank" rel="noopener">Poker II 机械键盘键位改造记</a></p><!--[1]: /images/post/IMG_2225.JPG[2]: /images/post/IMG_2223.JPG[3]: /images/post/IMG_2224.JPG[4]: /images/post/IMG_2226.JPG[5]: /images/post/IMG_2228.JPG[6]: /images/post/ehlxr-poker-0.png[7]: /images/post/ehlxr-poker-2.jpeg[8]: /images/post/ehlxr-poker-3.png[9]: /images/post/ehlxr-poker-1.png-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个码农，天天和键盘打交道，没有一款称心如意的键盘怎么能行了？要说那一款键盘堪称神器，我想大多数程序员首推 HHKB ，怎奈囊中羞涩，只能找一款 HHKB 的替代品，于是，Poker 浮现我的眼中，经济实惠，小巧玲珑，深得我心…&lt;/p&gt;
&lt;p&gt;关注这款键盘其实很久了，虽说相对于 HHKB 来说便宜很多，但也有点儿心疼，迟迟没能入手。最近过生日，女朋友很民主的征求我的意见，问我想要什么礼物，嘿嘿&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>Java 获取系统的配置信息</title>
    <link href="https://ehlxr.me/2017/03/29/Java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/"/>
    <id>https://ehlxr.me/2017/03/29/Java-获取系统的配置信息/</id>
    <published>2017-03-29T07:33:54.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>System.getProperty()</code> 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 <code>System.getProperty(&quot;java.io.tmpdir&quot;)</code> 可以获取不同操作系统平台下的临时目录。比如：</p><p>在 <code>windows</code> 中的目录是：<code>C:\Users\登录用户~1\AppData\Local\Temp\</code></p><p>在 <code>linux</code> 下的目录是：<code>/tmp</code></p><p>在 <code>Mac</code> 下目录是 <code>/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/</code> （我感觉是不同电脑应该不一样）</p><a id="more"></a><p>借此机会总结一下 <code>System.getProperty()</code> 可以获取那些系统信息:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">java.version    <span class="comment">// Java运行时环境版本</span></span><br><span class="line">java.vendor <span class="comment">// Java运行时环境供应商</span></span><br><span class="line">java.vendor.url <span class="comment">// Java供应商的 URL</span></span><br><span class="line">java.home   <span class="comment">// Java安装目录</span></span><br><span class="line">java.vm.specification.version   <span class="comment">// Java虚拟机规范版本</span></span><br><span class="line">java.vm.specification.vendor    <span class="comment">// Java虚拟机规范供应商</span></span><br><span class="line">java.vm.specification.name  <span class="comment">// Java虚拟机规范名称</span></span><br><span class="line">java.vm.version <span class="comment">// Java虚拟机实现版本</span></span><br><span class="line">java.vm.vendor  <span class="comment">// Java虚拟机实现供应商</span></span><br><span class="line">java.vm.name    <span class="comment">// Java虚拟机实现名称</span></span><br><span class="line">java.specification.version  <span class="comment">// Java运行时环境规范版本</span></span><br><span class="line">java.specification.vendor   <span class="comment">// Java运行时环境规范供应商</span></span><br><span class="line">java.specification.name <span class="comment">// Java运行时环境规范名称</span></span><br><span class="line">java.class.version  <span class="comment">// Java类格式版本号</span></span><br><span class="line">java.class.path <span class="comment">// Java类路径</span></span><br><span class="line">java.library.path   <span class="comment">// 加载库时搜索的路径列表</span></span><br><span class="line">java.io.tmpdir  <span class="comment">// 默认的临时文件路径</span></span><br><span class="line">java.compiler   <span class="comment">// 要使用的 JIT 编译器的名称</span></span><br><span class="line">java.ext.dirs   <span class="comment">// 一个或多个扩展目录的路径</span></span><br><span class="line">os.name <span class="comment">// 操作系统的名称</span></span><br><span class="line">os.arch <span class="comment">// 操作系统的架构</span></span><br><span class="line">os.version  <span class="comment">// 操作系统的版本</span></span><br><span class="line">file.separator  <span class="comment">// 文件分隔符（在 UNIX 系统中是“/”）</span></span><br><span class="line">path.separator  <span class="comment">// 路径分隔符（在 UNIX 系统中是“:”）</span></span><br><span class="line">line.separator  <span class="comment">// 行分隔符（在 UNIX 系统中是“/n”）</span></span><br><span class="line">user.name   <span class="comment">// 用户的账户名称</span></span><br><span class="line">user.home   <span class="comment">// 用户的主目录</span></span><br><span class="line">user.dir    <span class="comment">// 用户的当前工作目录</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;System.getProperty()&lt;/code&gt; 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 &lt;code&gt;System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;)&lt;/code&gt; 可以获取不同操作系统平台下的临时目录。比如：&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;windows&lt;/code&gt; 中的目录是：&lt;code&gt;C:\Users\登录用户~1\AppData\Local\Temp\&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;linux&lt;/code&gt; 下的目录是：&lt;code&gt;/tmp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Mac&lt;/code&gt; 下目录是 &lt;code&gt;/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/&lt;/code&gt; （我感觉是不同电脑应该不一样）&lt;/p&gt;
    
    </summary>
    
      <category term="Java开发技术" scheme="https://ehlxr.me/categories/Java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Java" scheme="https://ehlxr.me/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用技巧总结</title>
    <link href="https://ehlxr.me/2017/02/21/Mac-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>https://ehlxr.me/2017/02/21/Mac-使用技巧总结/</id>
    <published>2017-02-21T13:40:06.000Z</published>
    <updated>2017-11-25T05:45:19.489Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Mac 系统日常使用技巧归纳总结。</p></blockquote><h1 id="一、Mac-中-Finder-显示、关闭隐藏文件"><a href="#一、Mac-中-Finder-显示、关闭隐藏文件" class="headerlink" title="一、Mac 中 Finder 显示、关闭隐藏文件"></a>一、Mac 中 Finder 显示、关闭隐藏文件</h1><h2 id="1-1-终端命令模式"><a href="#1-1-终端命令模式" class="headerlink" title="1.1 终端命令模式"></a>1.1 终端命令模式</h2><ul><li><p>打开终端，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 此命令显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 此命令关闭显示隐藏文件</span></span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false</span><br></pre></td></tr></table></figure></li><li><p>命令运行之后需要重新加载 Finder</p><p>快捷键 <code>Option + Command + ESC</code>，选中 <code>Finder</code>，重新启动即可</p></li></ul><h2 id="1-2-Finder-快捷键"><a href="#1-2-Finder-快捷键" class="headerlink" title="1.2 Finder 快捷键"></a>1.2 Finder 快捷键</h2><p>在 macOS Sierra（10.12） 版本的系统中，我们可以使用快捷键<code>⌘⇧.</code>(<code>Command + Shift + .</code>) 来快速（在 Finder 中）显示和隐藏隐藏文件了。</p><a id="more"></a><h1 id="二、Terminal-中使用-Sublime-打开文件"><a href="#二、Terminal-中使用-Sublime-打开文件" class="headerlink" title="二、Terminal 中使用 Sublime 打开文件"></a>二、Terminal 中使用 Sublime 打开文件</h1><h2 id="2-1-如果使用默认-Shell"><a href="#2-1-如果使用默认-Shell" class="headerlink" title="2.1 如果使用默认 Shell"></a>2.1 如果使用默认 Shell</h2><p>在 <code>Terminal</code> 输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s "/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl" /usr/bin/subl</span><br></pre></td></tr></table></figure><h2 id="2-2-如果使用-zsh"><a href="#2-2-如果使用-zsh" class="headerlink" title="2.2 如果使用 zsh"></a>2.2 如果使用 zsh</h2><p>在文件 <code>~/.zshrc</code> 最后添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alias subl="'/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl'"</span><br><span class="line"></span><br><span class="line">alias nano="subl"</span><br><span class="line"></span><br><span class="line">export EDITOR="subl"</span><br></pre></td></tr></table></figure><p>然后在 <code>Terminal</code> 中使用 <code>subl</code> 就可以打开 <code>Sublime</code> 了。</p><h2 id="2-3-使用-Sublime-打开指定的文件"><a href="#2-3-使用-Sublime-打开指定的文件" class="headerlink" title="2.3 使用 Sublime 打开指定的文件"></a>2.3 使用 Sublime 打开指定的文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a Sublime\ Text .m2/settings.xml</span><br></pre></td></tr></table></figure><blockquote><p>可以使用 <code>Tab</code> 自定补全应用名称</p></blockquote><h1 id="三、多屏切换-dock-显示"><a href="#三、多屏切换-dock-显示" class="headerlink" title="三、多屏切换 dock 显示"></a>三、多屏切换 dock 显示</h1><p>如果 <code>dock</code> 在屏幕底部显示，移动鼠标到要显示 <code>dock</code> 的屏幕上，单击使屏幕处于选中状态，在屏幕底部中间部位向下滑动鼠标即可移动 <code>dock</code> 到当前屏幕上显示。</p><h1 id="四、Terminal-重启-Finder、dock-等命令"><a href="#四、Terminal-重启-Finder、dock-等命令" class="headerlink" title="四、Terminal 重启 Finder、dock 等命令"></a>四、Terminal 重启 Finder、dock 等命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Finder 崩溃重启</span></span><br><span class="line">killall -kill Finder</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dock 崩溃重启</span></span><br><span class="line">killall -kill Dock</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 菜单栏崩溃重启</span></span><br><span class="line">killall -kill SystemUIServer</span><br></pre></td></tr></table></figure><h1 id="五、Terminal-中用打开当前路径的文件夹"><a href="#五、Terminal-中用打开当前路径的文件夹" class="headerlink" title="五、Terminal 中用打开当前路径的文件夹"></a>五、Terminal 中用打开当前路径的文件夹</h1><p>在 <code>Terminal</code> 中输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open .</span><br></pre></td></tr></table></figure><h1 id="六、剪贴文件"><a href="#六、剪贴文件" class="headerlink" title="六、剪贴文件"></a>六、剪贴文件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 复制</span></span><br><span class="line">Command + c</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 剪切到当前目录</span></span><br><span class="line">Command + Option + v</span><br></pre></td></tr></table></figure><h1 id="七、快速打开最小化程序"><a href="#七、快速打开最小化程序" class="headerlink" title="七、快速打开最小化程序"></a>七、快速打开最小化程序</h1><p><code>Command + Tab</code> 切换程序的时候，最小化的程序不自动弹出窗口，解决办法如下：</p><ul><li>用 <code>Command + Tab</code> 切换到要打开的程序</li><li>先松开 <code>Tab</code> 键，不要松开 <code>Command</code> 键</li><li>然后按住 <code>Option</code> 键</li><li>然后依次松开 <code>Command</code> 和 <code>Option</code> 键</li></ul><p>如上操作就可以快速打开最小化的程序了。</p><h1 id="八、常用快捷键"><a href="#八、常用快捷键" class="headerlink" title="八、常用快捷键"></a>八、常用快捷键</h1><p><a href="https://support.apple.com/zh-cn/HT201236" target="_blank" rel="noopener">Mac 键盘快捷键官方参考</a></p><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>预览文件</td><td><code>空格</code></td></tr><tr><td>重命名</td><td><code>Enter</code></td></tr><tr><td>打开文件</td><td><code>Command + o</code>、<code>Command + ↓</code></td></tr><tr><td>显示桌面</td><td><code>F11</code></td></tr><tr><td>切换窗口全屏状态</td><td><code>Ctrl + Cmmad + f</code></td></tr><tr><td>影藏/显示 Dock</td><td><code>Command + Option + d</code></td></tr><tr><td>输入 emoji 表情</td><td><code>Ctrl + Cmmad + 空格</code></td></tr></tbody></table><h1 id="九、-DS-Store-文件处理"><a href="#九、-DS-Store-文件处理" class="headerlink" title="九、.DS_Store 文件处理"></a>九、.DS_Store 文件处理</h1><p><a href="https://zh.wikipedia.org/wiki/.DS_Store" target="_blank" rel="noopener">.DS_Store (英文全称 Desktop Services Store) 是一种由苹果公司的 Mac OS X 操作系统所创造的隐藏文件，目的在于存贮目录的自定义属性，例如文件们的图标位置或者是背景色的选择。</a></p><h2 id="9-1-清除文件"><a href="#9-1-清除文件" class="headerlink" title="9.1 清除文件"></a>9.1 清除文件</h2><p>清除命令：</p><p><code>sudo find / -name &quot;.DS_Store&quot; -depth -exec rm {} \;</code></p><h2 id="9-2-禁用或启用自动生成"><a href="#9-2-禁用或启用自动生成" class="headerlink" title="9.2 禁用或启用自动生成"></a>9.2 禁用或启用自动生成</h2><p>执行以下命令，回车执行，重启 Mac 即可生效。</p><ul><li>禁止.DS_store生成：</li></ul><p><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></p><ul><li>恢复.DS_store生成：</li></ul><p><code>defaults delete com.apple.desktopservices DSDontWriteNetworkStores</code></p><h1 id="十、NTFS-格式移动盘写入文件"><a href="#十、NTFS-格式移动盘写入文件" class="headerlink" title="十、NTFS 格式移动盘写入文件"></a>十、NTFS 格式移动盘写入文件</h1><p>一般来说，MacOS 是不支持 NTFS 格式磁盘的写入，可以借助三方工具，例如：Tuxera NTFS，不过收费还挺高的。这里介绍一种方法，不需要借助三方工具也可以实现 NTFS 格式磁盘写入。（基于系统版本 <code>macOS Sierra 10.12.4</code>  亲测可行）</p><ul><li><p>插入移动硬盘，终端输入命令：<code>$ diskutil list</code> 查看移动硬盘名称。例如：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ diskutil list</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line"></span><br><span class="line">/dev/disk2 (external, physical):</span><br><span class="line">   #:                      <span class="built_in"> TYPE </span>NAME            SIZE       IDENTIFIER</span><br><span class="line">   0:     FDisk_partition_scheme                 <span class="number">*500</span>.1 GB   disk2</span><br><span class="line">   1:               Windows_NTFS EHLXR           500.1 GB   disk2s4</span><br></pre></td></tr></table></figure></li><li><p>编辑系统文件 <code>sudo vim /etc/fstab</code> ，写入以下内容，然后保存。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LABEL</span><span class="bash">=EHLXR none ntfs rw,auto,nobrowse</span></span><br></pre></td></tr></table></figure><p>其中 <code>EHLXR</code> 为移动硬盘名称。</p></li><li><p>推出硬盘重新插入，这时候桌面已不再显示移动硬盘图标。</p></li><li><p>在 Finder 中通过快捷键 <code>Command + Shift + g</code> 输入<code>/Volumes</code> 就可以重新看到移动硬盘，这时候打开移动硬盘就可以写入文件了。</p></li><li><p>为了方便起见，可以通过命令：<code>sudo ln -s /Volumes ~/Desktop/Volumes</code> 在桌面建立快捷方式，方便查看。</p></li></ul><hr><p><em>未完待续…</em></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Mac 系统日常使用技巧归纳总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、Mac-中-Finder-显示、关闭隐藏文件&quot;&gt;&lt;a href=&quot;#一、Mac-中-Finder-显示、关闭隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;一、Mac 中 Finder 显示、关闭隐藏文件&quot;&gt;&lt;/a&gt;一、Mac 中 Finder 显示、关闭隐藏文件&lt;/h1&gt;&lt;h2 id=&quot;1-1-终端命令模式&quot;&gt;&lt;a href=&quot;#1-1-终端命令模式&quot; class=&quot;headerlink&quot; title=&quot;1.1 终端命令模式&quot;&gt;&lt;/a&gt;1.1 终端命令模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开终端，输入：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 此命令显示隐藏文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -bool true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 此命令关闭显示隐藏文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;defaults write com.apple.finder AppleShowAllFiles -bool false&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;命令运行之后需要重新加载 Finder&lt;/p&gt;
&lt;p&gt;快捷键 &lt;code&gt;Option + Command + ESC&lt;/code&gt;，选中 &lt;code&gt;Finder&lt;/code&gt;，重新启动即可&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-2-Finder-快捷键&quot;&gt;&lt;a href=&quot;#1-2-Finder-快捷键&quot; class=&quot;headerlink&quot; title=&quot;1.2 Finder 快捷键&quot;&gt;&lt;/a&gt;1.2 Finder 快捷键&lt;/h2&gt;&lt;p&gt;在 macOS Sierra（10.12） 版本的系统中，我们可以使用快捷键&lt;code&gt;⌘⇧.&lt;/code&gt;(&lt;code&gt;Command + Shift + .&lt;/code&gt;) 来快速（在 Finder 中）显示和隐藏隐藏文件了。&lt;/p&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Mac" scheme="https://ehlxr.me/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Linux 的 nohup 命令的用法</title>
    <link href="https://ehlxr.me/2017/01/18/Linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>https://ehlxr.me/2017/01/18/Linux-的-nohup-命令的用法/</id>
    <published>2017-01-18T08:13:21.000Z</published>
    <updated>2017-07-10T04:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 <code>nohup</code> 命令。</p></blockquote><h1 id="命令简介"><a href="#命令简介" class="headerlink" title="命令简介"></a>命令简介</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup Command [ Arg … ] [ &amp; ]</span><br></pre></td></tr></table></figure><p>该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。<code>nohup</code> 就是不挂起的意思（<code>no hang up</code>）。</p><p><code>nohup</code> 运行由 <code>Command</code> 和相关的 <code>Arg</code> 参数指定的命令，忽略所有挂断（<code>SIGHUP</code>）信号。要运行后台中的 <code>nohup</code> 命令，添加 <code>&amp;</code> （ 表示 <code>and</code> 的符号）到命令的尾部。</p><p>如果使用 <code>nohup</code> 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 <code>nohup.out</code> 的文件中，除非另外指定了输出文件。</p><a id="more"></a><h1 id="使用举例"><a href="#使用举例" class="headerlink" title="使用举例"></a>使用举例</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>在上面的例子中，运行命令 <code>java -jar adapter-minisite.jar</code> 输入参数 <code>/tomcat-1</code> 和 <code>/tomcat-2</code>，输出被重定向到 <code>logs.txt</code> 文件中。</p><h1 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h1><p>如果运行的任务在当前 <code>shell</code> 终端，可以通过 <code>jobs</code> 命令查询相关信息，并且杀掉进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前 shell 终端的后台运行任务进程信息</span></span><br><span class="line">$ <span class="built_in">jobs</span></span><br><span class="line">[1]+ Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀掉任务号</span></span><br><span class="line">$ <span class="built_in">kill</span> %1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或着找到 pid</span></span><br><span class="line">$ <span class="built_in">jobs</span> -l</span><br><span class="line">[1]+ 11076 Running nohup java -jar adapter-minisite.jar /tomcat-1 /tomcat-2 &gt; logs.txt 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">kill</span> 11076</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或着</span></span><br><span class="line">$ <span class="built_in">fg</span> %n <span class="comment"># 置为前端运行</span></span><br><span class="line"></span><br><span class="line">Ctrl + c <span class="comment"># 退出</span></span><br></pre></td></tr></table></figure><p>如果非当前 <code>shell</code> 终端，可以通过 <code>ps auxf | grep &#39;adapter-minisite&#39;</code> 获取 <code>pid</code> 然后 <code>kill pid</code>。</p><hr><p><a href="http://www.cnblogs.com/allenblogs/archive/2011/05/19/2051136.html" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 &lt;code&gt;nohup&lt;/code&gt; 命令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;命令简介&quot;&gt;&lt;a href=&quot;#命令简介&quot; class=&quot;headerlink&quot; title=&quot;命令简介&quot;&gt;&lt;/a&gt;命令简介&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ nohup Command [ Arg … ] [ &amp;amp; ]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。&lt;code&gt;nohup&lt;/code&gt; 就是不挂起的意思（&lt;code&gt;no hang up&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt; 运行由 &lt;code&gt;Command&lt;/code&gt; 和相关的 &lt;code&gt;Arg&lt;/code&gt; 参数指定的命令，忽略所有挂断（&lt;code&gt;SIGHUP&lt;/code&gt;）信号。要运行后台中的 &lt;code&gt;nohup&lt;/code&gt; 命令，添加 &lt;code&gt;&amp;amp;&lt;/code&gt; （ 表示 &lt;code&gt;and&lt;/code&gt; 的符号）到命令的尾部。&lt;/p&gt;
&lt;p&gt;如果使用 &lt;code&gt;nohup&lt;/code&gt; 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 &lt;code&gt;nohup.out&lt;/code&gt; 的文件中，除非另外指定了输出文件。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="nohup" scheme="https://ehlxr.me/tags/nohup/"/>
    
  </entry>
  
  <entry>
    <title>Linux 中 fg、bg、jobs 等指令</title>
    <link href="https://ehlxr.me/2017/01/18/Linux-%E4%B8%AD-fg%E3%80%81bg%E3%80%81jobs%E3%80%81-%E6%8C%87%E4%BB%A4/"/>
    <id>https://ehlxr.me/2017/01/18/Linux-中-fg、bg、jobs、-指令/</id>
    <published>2017-01-18T07:30:16.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录总结一下 <code>Linux</code> 中 <code>fg</code>、<code>bg</code>、<code>jobs</code>、<code>&amp;</code>、<code>ctrl + z</code> 等相关指令对任务进程的操作。</p></blockquote><h1 id="一、基本用法"><a href="#一、基本用法" class="headerlink" title="一、基本用法"></a>一、基本用法</h1><h2 id="1-1-amp-和-jobs-指令"><a href="#1-1-amp-和-jobs-指令" class="headerlink" title="1.1 &amp; 和 jobs 指令"></a>1.1 <code>&amp;</code> 和 <code>jobs</code> 指令</h2><p><code>&amp;</code> 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。</p><p><code>jobs</code> 查看当前终端有多少在后台运行的进程。</p><ul><li><p><code>jobs</code> 命令执行的结果，<code>＋</code> 表示是一个当前的作业，<code>-</code> 减号表示是一个当前作业之后的一个作业。</p></li><li><p><code>jobs -l</code> 选项可显示所有任务的进程号 <code>pid</code></p></li><li><p><code>jobs</code> 的状态可以是 <code>running</code>，<code>stopped</code>，<code>terminated</code>。但是如果任务进程被终止了（<code>kill</code>），当前的终端环境中也就删除了任务的进程标识；也就是说 <strong>jobs 命令显示的是当前 shell 环境中后台正在运行或者被挂起的任务进程信息</strong></p></li></ul><a id="more"></a><h2 id="1-3-fg-和-bg-指令"><a href="#1-3-fg-和-bg-指令" class="headerlink" title="1.3 fg 和 bg 指令"></a>1.3 <code>fg</code> 和 <code>bg</code> 指令</h2><p><code>fg</code> 将后台任务进程调至前台继续运行，如果后台中有多个任务进程，可以用 <code>fg %num</code> 将选中的任务进程调至前台。</p><p><code>bg</code> 将挂起的任务进程重新启动运行，如果有多个暂停的任务进程，可以用 <code>bg %num</code> 将选中的任务进程启动运行。</p><blockquote><p><code>%num</code> 是通过 <code>jobs</code> 命令查到的后台正在执行的任务的序号（不是 <code>pid</code>）</p></blockquote><h1 id="二、进程的挂起"><a href="#二、进程的挂起" class="headerlink" title="二、进程的挂起"></a>二、进程的挂起</h1><h2 id="2-1-后台进程的挂起"><a href="#2-1-后台进程的挂起" class="headerlink" title="2.1 后台进程的挂起"></a>2.1 后台进程的挂起</h2><ul><li><p>在 <code>solaris</code> 中通过 <code>stop</code> 命令执行，通过 <code>jobs</code> 命令查看任务号（假设为 <code>num</code>），然后执行：<code>stop %num</code></p></li><li><p>在 <code>redhat</code> 中，不存在 <code>stop</code> 命令，可通过执行命令 <code>kill -stop PID</code>，将进程挂起</p></li></ul><h2 id="2-2-前台进程的挂起"><a href="#2-2-前台进程的挂起" class="headerlink" title="2.2 前台进程的挂起"></a>2.2 前台进程的挂起</h2><p><code>ctrl + z</code>：可以将一个正在前台执行的任务放到后台运行，并且挂起</p><h1 id="三、挂起进程重新运行"><a href="#三、挂起进程重新运行" class="headerlink" title="三、挂起进程重新运行"></a>三、挂起进程重新运行</h1><ul><li><p>通过 <code>bg %num</code> 即可将挂起的任务进程的状态由 <code>stopped</code> 改为 <code>running</code>，仍在后台运行</p></li><li><p>通过 <code>fg %num</code> 即可将挂起的任务进程转为前台执行</p></li></ul><h1 id="四、进程的终止"><a href="#四、进程的终止" class="headerlink" title="四、进程的终止"></a>四、进程的终止</h1><h2 id="4-1-后台进程的终止"><a href="#4-1-后台进程的终止" class="headerlink" title="4.1 后台进程的终止"></a>4.1 后台进程的终止</h2><ul><li><p>方法一： 通过 <code>jobs</code> 命令查看任务号（假设为 <code>num</code>），然后执行：<code>kill %num</code></p></li><li><p>方法二： 通过 <code>ps</code> 命令查看任务的进程号（<code>PID</code>，假设为 <code>pid</code>），然后执行：<code>kill pid</code></p></li></ul><h2 id="4-2-前台进程的终止"><a href="#4-2-前台进程的终止" class="headerlink" title="4.2 前台进程的终止"></a>4.2 前台进程的终止</h2><p>执行 <code>ctrl+c</code> 即可终止前台执行任务进程</p><blockquote><p>假设要后台运行 <code>xmms</code>，可通过命令：<code>xmms &amp;</code>。但万一你运行程序时忘记使用 <code>&amp;</code> 了，又不想重新执行，你可以先使用 <code>ctrl+z</code> 挂起任务进程，然后敲入<code>bg</code> 命令，这样任务进程就在后台继续运行了。</p></blockquote><hr>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录总结一下 &lt;code&gt;Linux&lt;/code&gt; 中 &lt;code&gt;fg&lt;/code&gt;、&lt;code&gt;bg&lt;/code&gt;、&lt;code&gt;jobs&lt;/code&gt;、&lt;code&gt;&amp;amp;&lt;/code&gt;、&lt;code&gt;ctrl + z&lt;/code&gt; 等相关指令对任务进程的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一、基本用法&quot;&gt;&lt;a href=&quot;#一、基本用法&quot; class=&quot;headerlink&quot; title=&quot;一、基本用法&quot;&gt;&lt;/a&gt;一、基本用法&lt;/h1&gt;&lt;h2 id=&quot;1-1-amp-和-jobs-指令&quot;&gt;&lt;a href=&quot;#1-1-amp-和-jobs-指令&quot; class=&quot;headerlink&quot; title=&quot;1.1 &amp;amp; 和 jobs 指令&quot;&gt;&lt;/a&gt;1.1 &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;jobs&lt;/code&gt; 指令&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 查看当前终端有多少在后台运行的进程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 命令执行的结果，&lt;code&gt;＋&lt;/code&gt; 表示是一个当前的作业，&lt;code&gt;-&lt;/code&gt; 减号表示是一个当前作业之后的一个作业。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs -l&lt;/code&gt; 选项可显示所有任务的进程号 &lt;code&gt;pid&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 的状态可以是 &lt;code&gt;running&lt;/code&gt;，&lt;code&gt;stopped&lt;/code&gt;，&lt;code&gt;terminated&lt;/code&gt;。但是如果任务进程被终止了（&lt;code&gt;kill&lt;/code&gt;），当前的终端环境中也就删除了任务的进程标识；也就是说 &lt;strong&gt;jobs 命令显示的是当前 shell 环境中后台正在运行或者被挂起的任务进程信息&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>[转] CentOS 升级 kernel</title>
    <link href="https://ehlxr.me/2017/01/10/%E8%BD%AC-CentOS-%E5%8D%87%E7%BA%A7-kernel/"/>
    <id>https://ehlxr.me/2017/01/10/转-CentOS-升级-kernel/</id>
    <published>2017-01-10T03:01:09.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、手动档"><a href="#一、手动档" class="headerlink" title="一、手动档"></a>一、手动档</h1><p>手动档就是从源码开始编译内核安装，好处是可以自己选择任意版本的内核，缺点就是耗时长，编译安装消耗系统资源</p><h2 id="1-1、获取-kernel-源码"><a href="#1-1、获取-kernel-源码" class="headerlink" title="1.1、获取 kernel 源码"></a>1.1、获取 kernel 源码</h2><p>这世界上最伟大的 Linux 内核源码下载地址是 <a href="https://kernel.org/" target="_blank" rel="noopener">kernel</a> 官网，选择一个稳定版本下载即可</p><h2 id="1-2、解压并清理"><a href="#1-2、解压并清理" class="headerlink" title="1.2、解压并清理"></a>1.2、解压并清理</h2><p>官方要求将其解压到 <code>/usr/src</code> 目录，其实在哪都可以，为了规范一点索性也解压到此位置，然后为了防止编译残留先做一次清理动作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载内核源码</span></span><br><span class="line">$ wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压并移动到 /usr/src</span></span><br><span class="line">$ tar -Jxvf linux-4.8.6.tar.xz</span><br><span class="line">$ mv linux-4.8.6 /usr/src/kernels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清理（没 gcc 的要装一下）</span></span><br><span class="line">$ <span class="built_in">cd</span> /usr/src/kernels/linux-4.8.6</span><br><span class="line">$ make mrproper &amp;&amp; make clean</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-3、生成编译配置表"><a href="#1-3、生成编译配置表" class="headerlink" title="1.3、生成编译配置表"></a>1.3、生成编译配置表</h2><p>kernel 在编译时需要一个配置文件（<code>.config</code>），用于描述开启哪些特性等，该文件一般可通过一下四种途径获得:</p><ul><li>复制当前系统编译配置表，即 <code>cp /boot/config-xxx .config</code>；如果系统有多个内核，那么根据版本号选择最新的即可</li><li>使用 <code>make defconfig</code> 命令获取当前系统编译配置表，该命令会自动写入到 <code>.config</code> 中</li><li>使用 <code>make localmodconfig</code> 命令开启交互模式，然后根据提示生成编译配置表</li><li>使用 <code>make oldconfig</code> 命令根据旧的编译配置表生成新的编译配置表，<strong>刚方式会直接读取旧的便已配置表，并在以前没有设定过的配置时会自动开启交互模式</strong></li></ul><p>这里采用最后一种方式生成</p><h2 id="1-4、编译并安装"><a href="#1-4、编译并安装" class="headerlink" title="1.4、编译并安装"></a>1.4、编译并安装</h2><p>内核配置表生成完成后便可进行编译和安装（需要安装 <code>bc、openssl-devel</code> 等）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ make modules</span><br><span class="line">$ make modules_install</span><br><span class="line">$ make install</span><br></pre></td></tr></table></figure><p>最后执行重启验证即可，验证成功后可删除旧的内核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检索已安装的内核</span></span><br><span class="line">$ sudo rpm -qa | grep kernel</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的内核</span></span><br><span class="line">$ sudo rpm -e kernel-3.10.0-327.el7.x86_64</span><br></pre></td></tr></table></figure><h1 id="二、自动档"><a href="#二、自动档" class="headerlink" title="二、自动档"></a>二、自动档</h1><p>相对于手动档编译安装，CentOS 还可以通过使用 <a href="http://elrepo.org/tiki/tiki-index.php" target="_blank" rel="noopener">elrepo</a> 源的方式直接安装最新稳定版 kernel，脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import key</span></span><br><span class="line">$ sudo rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># install elrepo repo</span></span><br><span class="line">$ sudo rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># install kernel</span></span><br><span class="line">$ sudo yum --enablerepo=elrepo-kernel install  kernel-ml-devel kernel-ml -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify grub</span></span><br><span class="line">$ sudo grub2-set-default 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># reboot system</span></span><br><span class="line">$ sudo reboot</span><br></pre></td></tr></table></figure><p><a href="https://mritd.me/2016/11/08/update-centos-kernel/" target="_blank" rel="noopener">原文地址</a></p><hr>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、手动档&quot;&gt;&lt;a href=&quot;#一、手动档&quot; class=&quot;headerlink&quot; title=&quot;一、手动档&quot;&gt;&lt;/a&gt;一、手动档&lt;/h1&gt;&lt;p&gt;手动档就是从源码开始编译内核安装，好处是可以自己选择任意版本的内核，缺点就是耗时长，编译安装消耗系统资源&lt;/p&gt;
&lt;h2 id=&quot;1-1、获取-kernel-源码&quot;&gt;&lt;a href=&quot;#1-1、获取-kernel-源码&quot; class=&quot;headerlink&quot; title=&quot;1.1、获取 kernel 源码&quot;&gt;&lt;/a&gt;1.1、获取 kernel 源码&lt;/h2&gt;&lt;p&gt;这世界上最伟大的 Linux 内核源码下载地址是 &lt;a href=&quot;https://kernel.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;kernel&lt;/a&gt; 官网，选择一个稳定版本下载即可&lt;/p&gt;
&lt;h2 id=&quot;1-2、解压并清理&quot;&gt;&lt;a href=&quot;#1-2、解压并清理&quot; class=&quot;headerlink&quot; title=&quot;1.2、解压并清理&quot;&gt;&lt;/a&gt;1.2、解压并清理&lt;/h2&gt;&lt;p&gt;官方要求将其解压到 &lt;code&gt;/usr/src&lt;/code&gt; 目录，其实在哪都可以，为了规范一点索性也解压到此位置，然后为了防止编译残留先做一次清理动作&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载内核源码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 解压并移动到 /usr/src&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar -Jxvf linux-4.8.6.tar.xz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mv linux-4.8.6 /usr/src/kernels&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 执行清理（没 gcc 的要装一下）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /usr/src/kernels/linux-4.8.6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make mrproper &amp;amp;&amp;amp; make clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://ehlxr.me/tags/CentOS/"/>
    
      <category term="kernel" scheme="https://ehlxr.me/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>Docker 利用数据卷容器来备份、恢复、迁移数据</title>
    <link href="https://ehlxr.me/2017/01/09/Docker-%E5%88%A9%E7%94%A8%E6%95%B0%E6%8D%AE%E5%8D%B7%E5%AE%B9%E5%99%A8%E6%9D%A5%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D%E3%80%81%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE/"/>
    <id>https://ehlxr.me/2017/01/09/Docker-利用数据卷容器来备份、恢复、迁移数据/</id>
    <published>2017-01-09T08:54:24.000Z</published>
    <updated>2017-07-10T04:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 Docker 容器之间如果需要共享数据，可以创建一个数据卷容器来实现，并且可以方便的通过数据卷容器来备份、恢复、迁移数据。</p></blockquote><h1 id="创建数据卷容器"><a href="#创建数据卷容器" class="headerlink" title="创建数据卷容器"></a>创建数据卷容器</h1><p>创建一个名为：dbdata 的数据卷容器；设置挂载点为 <code>/vdata</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -v /vdata --name dbdata alpine sh</span><br></pre></td></tr></table></figure><p>数据卷容器是一个普通的 Docker 容器，可以不需要启动。<br><a id="more"></a></p><h1 id="使用数据卷容器"><a href="#使用数据卷容器" class="headerlink" title="使用数据卷容器"></a>使用数据卷容器</h1><p>使用命令 <code>--volumes-from</code> 创建挂载数据卷容器 dbdata 的容器：db1、db2。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -it --volumes-from dbdata --name db1 alpine sh</span><br><span class="line"></span><br><span class="line">$ sudo docker run -it --volumes-from dbdata --name db1 alpine sh</span><br></pre></td></tr></table></figure><p>在容器 db1 的挂载目录 <code>/vdata</code> 目录下，创建文件 1.txt 等测试数据，查看容器 db2 的挂载目录 <code>/vdata</code> 目录，就可以看到创建的文件数据了。</p><h1 id="备份数据卷数据"><a href="#备份数据卷数据" class="headerlink" title="备份数据卷数据"></a>备份数据卷数据</h1><p>使用一个临时容器，完成备份数据容器操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from dbdata -v $(<span class="built_in">pwd</span>):/backup alpine tar cvf /backup/vdata-bak.tar /vdata</span><br></pre></td></tr></table></figure><p>使用 <code>tar cvf</code> 命令，备份数据卷容器 dbdata 中的目录 <code>/vdata</code> 为 <code>vdata-bak.tar</code>，并挂载到宿主机的当前目录下。</p><h1 id="恢复数据卷数据"><a href="#恢复数据卷数据" class="headerlink" title="恢复数据卷数据"></a>恢复数据卷数据</h1><p>创建数据卷容器：dbdata2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run -d -v /vdata --name dbdata2 alpine sh</span><br></pre></td></tr></table></figure><p>使用一个临时容器，恢复备份数据 <code>vdata-bak.tar</code> 到 dbdata2</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from dbdata2 -v $(<span class="built_in">pwd</span>):/backup alpine tar xvf /backup/vdata-bak.tar</span><br></pre></td></tr></table></figure><p>使用一个临时容器，查看 dbdata2 恢复的数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run --rm --volumes-from dbdata2 alpine /bin/ls /vdata</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在 Docker 容器之间如果需要共享数据，可以创建一个数据卷容器来实现，并且可以方便的通过数据卷容器来备份、恢复、迁移数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;创建数据卷容器&quot;&gt;&lt;a href=&quot;#创建数据卷容器&quot; class=&quot;headerlink&quot; title=&quot;创建数据卷容器&quot;&gt;&lt;/a&gt;创建数据卷容器&lt;/h1&gt;&lt;p&gt;创建一个名为：dbdata 的数据卷容器；设置挂载点为 &lt;code&gt;/vdata&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo docker run -d -v /vdata --name dbdata alpine sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;数据卷容器是一个普通的 Docker 容器，可以不需要启动。&lt;br&gt;
    
    </summary>
    
      <category term="Docker" scheme="https://ehlxr.me/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://ehlxr.me/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7 安装Python3、pip3</title>
    <link href="https://ehlxr.me/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/"/>
    <id>https://ehlxr.me/2017/01/07/CentOS-7-安装-Python3、pip3/</id>
    <published>2017-01-07T11:23:22.000Z</published>
    <updated>2017-07-10T04:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。</p><h1 id="一、安装-Python-3"><a href="#一、安装-Python-3" class="headerlink" title="一、安装 Python 3"></a>一、安装 Python 3</h1><h2 id="1-1-安装准备"><a href="#1-1-安装准备" class="headerlink" title="1.1 安装准备"></a>1.1 安装准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mkdir /usr/<span class="built_in">local</span>/python3 <span class="comment"># 创建安装目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 Python 源文件</span></span><br><span class="line">$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz</span><br><span class="line"><span class="comment"># 注意：wget获取https的时候要加上：--no-check-certificate</span></span><br><span class="line"></span><br><span class="line">$ tar -xzvf Python-3.6.0.tgz <span class="comment"># 解压缩包</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> Python-3.6.0 <span class="comment"># 进入解压目录</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-2-编译安装"><a href="#1-2-编译安装" class="headerlink" title="1.2 编译安装"></a>1.2 编译安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ./configure --prefix=/usr/<span class="built_in">local</span>/python3 <span class="comment"># 指定创建的目录</span></span><br><span class="line"></span><br><span class="line">$ sudo make</span><br><span class="line"></span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure><h2 id="1-3-配置"><a href="#1-3-配置" class="headerlink" title="1.3 配置"></a>1.3 配置</h2><h3 id="1-3-1-两个版本共存"><a href="#1-3-1-两个版本共存" class="headerlink" title="1.3.1 两个版本共存"></a>1.3.1 两个版本共存</h3><p>创建 python3 的软链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><p>这样就可以通过 <code>python</code> 命令使用 Python 2，<code>python3</code> 来使用 Python 3。</p><h3 id="1-3-2-修改默认为-Python-3"><a href="#1-3-2-修改默认为-Python-3" class="headerlink" title="1.3.2 修改默认为 Python 3"></a>1.3.2 修改默认为 Python 3</h3><p>将 <code>/usr/bin</code> 中的 <code>python</code> 备份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo mv python python.bak</span><br></pre></td></tr></table></figure><p>然后创建 python3 的软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>这样默认的 Python 版本就替换为 Python 3 了。</p><p>因为 yum 使用 Python 2，因此替换为 Python 3 后可能无法正常工作，因此修改 yum 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo vi /usr/bin/yum</span><br></pre></td></tr></table></figure><p>将第一行指定的 python 版本改为 python2.7（<code>#!/usr/bin/python</code> 改为 <code>#!/usr/bin/python2.7</code>）</p><h1 id="二、安装-pip"><a href="#二、安装-pip" class="headerlink" title="二、安装 pip"></a>二、安装 pip</h1><h2 id="2-1-yum-安装"><a href="#2-1-yum-安装" class="headerlink" title="2.1 yum 安装"></a>2.1 yum 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先安装 epel 扩展源</span></span><br><span class="line">$ sudo yum -y install epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python-pip</span></span><br><span class="line">$ sudo yum -y install python-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除 cache</span></span><br><span class="line">$ sudo yum clean all</span><br></pre></td></tr></table></figure><p>通过这种方式貌似只能安装 pip2，想要安装 Python 3 的 pip，可以通过以下的源代码安装方式。</p><h2 id="2-2-源码安装"><a href="#2-2-源码安装" class="headerlink" title="2.2 源码安装"></a>2.2 源码安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源代码</span></span><br><span class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar -zvxf 9.0.1 -C pip-9.0.1    <span class="comment"># 解压文件</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> pip-9.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Python 3 安装</span></span><br><span class="line">$ python3 setup.py install</span><br></pre></td></tr></table></figure><p>创建链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure><h2 id="2-3-升级-pip"><a href="#2-3-升级-pip" class="headerlink" title="2.3 升级 pip"></a>2.3 升级 pip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。&lt;/p&gt;
&lt;h1 id=&quot;一、安装-Python-3&quot;&gt;&lt;a href=&quot;#一、安装-Python-3&quot; class=&quot;headerlink&quot; title=&quot;一、安装 Python 3&quot;&gt;&lt;/a&gt;一、安装 Python 3&lt;/h1&gt;&lt;h2 id=&quot;1-1-安装准备&quot;&gt;&lt;a href=&quot;#1-1-安装准备&quot; class=&quot;headerlink&quot; title=&quot;1.1 安装准备&quot;&gt;&lt;/a&gt;1.1 安装准备&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo mkdir /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/python3 &lt;span class=&quot;comment&quot;&gt;# 创建安装目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载 Python 源文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 注意：wget获取https的时候要加上：--no-check-certificate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ tar -xzvf Python-3.6.0.tgz &lt;span class=&quot;comment&quot;&gt;# 解压缩包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; Python-3.6.0 &lt;span class=&quot;comment&quot;&gt;# 进入解压目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://ehlxr.me/tags/CentOS/"/>
    
      <category term="Python" scheme="https://ehlxr.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Good bye 2016...</title>
    <link href="https://ehlxr.me/2016/12/31/Good-bye-2016/"/>
    <id>https://ehlxr.me/2016/12/31/Good-bye-2016/</id>
    <published>2016-12-31T04:51:14.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…</p><p>印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…</p><a id="more"></a><p>总结 2016，收获，知足，感恩…眼前的要珍惜，来之不易的拥有更要珍惜。</p><!-- <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" height= "90%" width="100%" src="https://music.daoapp.io/iframe?song=35307971&qssl=1&qlrc=1&qnarrow=0&autoplay=1"></iframe> --><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光飞逝，转眼间，2016 年已经在今天画上句号，结束了，再提起 2016 年就已经是过往了…&lt;/p&gt;
&lt;p&gt;印象中，十年应该要算是很长的一段时间吧，但仔细一琢磨十年前也就才 2006 年…那时候是高中，每天除了上课就是写作业，学习很枯燥总感觉时间很多，憧憬着美好的未来，过着也算是无忧无虑生活。每天放学，下晚自习，总是很快的骑着自行车冲出校门口，因为晚了学生会很多，那时候骑自行车一个比一个快。周五不用上晚自习，三五成群去网吧通宵，包宿八块钱八个小时，从晚上十点到第二天早上六点，六点从网吧出来总会有种恍如隔世的感觉，大街上几乎没有人，回出租屋睡上一天，感觉就是一周最美好的时光了！看着别的同学拿着小灵通、MP3 ，很羡慕，自已也想要有一个，都不敢奢望能有一台电脑…一切仿佛也就是昨天而已，但是已经十年之前了，不禁一颤，人生能有几个十年…&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://ehlxr.me/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="杂谈" scheme="https://ehlxr.me/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>[转] shell 中单引号、双引号、反引号、反斜杠区别</title>
    <link href="https://ehlxr.me/2016/12/30/%E8%BD%AC-shell-%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8C%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E5%BC%95%E5%8F%B7%E3%80%81%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%8C%BA%E5%88%AB/"/>
    <id>https://ehlxr.me/2016/12/30/转-shell-中单引号、双引号、反引号、反斜杠区别/</id>
    <published>2016-12-30T07:36:51.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><code>shell</code> 可以识别 <code>4</code> 种不同类型的引字符号：单引号字符 <code>&#39;</code>，双引号字符 <code>&quot;</code>，反斜杠字符 <code>\</code>，反引号字符 <code>`</code> ，学习 <code>shell</code> 编程的朋友可以看下。</p></blockquote><h1 id="1-单引号-39"><a href="#1-单引号-39" class="headerlink" title="1. 单引号( &#39; )"></a>1. 单引号( <code>&#39;</code> )</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep Susan phonebook</span></span><br><span class="line">Susan Goldberg 403-212-4921</span><br><span class="line">Susan Topple 212-234-2343</span><br></pre></td></tr></table></figure><p>如果我们想查找的是 <code>Susan Goldberg</code>，不能直接使用 <code>grep Susan Goldberg phonebook</code> 命令，<code>grep</code> 会把 <code>Goldberg</code> 和 <code>phonebook</code> 当作需要搜索的文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">'Susan Gold'</span> phonebook</span></span><br><span class="line">Susan Goldberg 403-212-4921</span><br></pre></td></tr></table></figure><p>当 <code>shell</code> 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。<br><a id="more"></a></p><h1 id="2-双引号-quot"><a href="#2-双引号-quot" class="headerlink" title="2. 双引号( &quot; )"></a>2. 双引号( <code>&quot;</code> )</h1><p>双引号作用与单引号类似，区别在于它没有那么严格。单引号告诉 <code>shell</code> 忽略所有特殊字符，而双引号只要求忽略大多数，具体说，括在双引号中的三种特殊字符不被忽略：<code>$</code>、<code>\</code>、<code>`</code>。即双引号会解释字符串的特别意思，而单引号直接使用字符串。如果使用双引号将字符串赋给变量并反馈它，实际上与直接反馈变量并无差别。如果要查询包含空格的字符串，经常会用到双引号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> x=*</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="variable">$x</span></span></span><br><span class="line">hello.sh menus.sh misc.sh phonebook tshift.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">'$x'</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash">x</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"<span class="variable">$x</span>"</span></span></span><br><span class="line">*</span><br></pre></td></tr></table></figure><p>这个例子可以看出无引号，单引号和双引号之间的区别。在最后一种情况中，双引号告诉 <code>shell</code> 在引号内照样进行变量名替换，所以 <code>shell</code> 把 <code>$x</code> 替换为 <code>＊</code>，因为双引号中不做文件名替换，所以就把 <code>＊</code> 作为要显示的值传递给 <code>echo</code>。</p><p>对于第一种情况需要进一步说明，<code>shell</code> 在给变量赋值时不进行文件名替换（这从第三种情况中也能看出来），各步骤发生的精确次序如下： <code>shell</code> 扫描命令行，把 <code>x</code> 的值设为星号 <code>＊</code>；<br><code>shell</code> 再次扫描命令行，碰到星号 <code>＊</code>，把它替换成当前目录下的文件清单；<code>shell</code> 启动执行 <code>echo</code> 命令，把文件清单作为参数传递给 <code>echo</code>。</p><p>这个赋值的先后次序非常重要：<code>shell</code> 先作变量替换，然后作文件名替换，最后把这行处理为参数。</p><h1 id="3-反引号"><a href="#3-反引号" class="headerlink" title="3. 反引号(`)"></a>3. 反引号(<code>`</code>)</h1><p>命令替换是指 <code>shell</code> 能够将一个命令的标准输出插在一个命令行中任何位置。<code>shell</code> 中有两种方法作命令替换：把 <code>shell</code> 命令用反引号或者 <code>$(...)</code> 结构括起来，其中 <code>$(...)</code> 格式受到 <code>POSIX</code> 标准支持，也利于嵌套。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> The date and time is `date`</span></span><br><span class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> The date and time is $(date)</span></span><br><span class="line">The date and time is 2016年 12月 28日 星期三 16:15:44 CST</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Your current working directory is $(<span class="built_in">pwd</span>)</span></span><br><span class="line">Your current working directory is /home/howard/script</span><br></pre></td></tr></table></figure><h1 id="4-反斜杠-backslash-escaped"><a href="#4-反斜杠-backslash-escaped" class="headerlink" title="4. 反斜杠 backslash-escaped( \ )"></a>4. 反斜杠 backslash-escaped( <code>\</code> )</h1><p>反斜杠一般用作转义字符，或称逃脱字符。<code>Linux</code> 如果 <code>echo</code> 要让转义字符发生作用，就要使用 <code>-e</code> 选项，且转义字符要使用双引号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e "\n"</span><br></pre></td></tr></table></figure><p>反斜杠的另一种作用，就是当反斜杠用于一行的最后一个字符时，<strong><code>shell</code> 把行尾的反斜杠作为续行</strong>，这种结构在分几行输入长命令时经常使用。</p><hr><p><a href="http://www.jb51.net/article/33495.htm" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt; 可以识别 &lt;code&gt;4&lt;/code&gt; 种不同类型的引字符号：单引号字符 &lt;code&gt;&amp;#39;&lt;/code&gt;，双引号字符 &lt;code&gt;&amp;quot;&lt;/code&gt;，反斜杠字符 &lt;code&gt;\&lt;/code&gt;，反引号字符 &lt;code&gt;`&lt;/code&gt; ，学习 &lt;code&gt;shell&lt;/code&gt; 编程的朋友可以看下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-单引号-39&quot;&gt;&lt;a href=&quot;#1-单引号-39&quot; class=&quot;headerlink&quot; title=&quot;1. 单引号( &amp;#39; )&quot;&gt;&lt;/a&gt;1. 单引号( &lt;code&gt;&amp;#39;&lt;/code&gt; )&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; grep Susan phonebook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Susan Goldberg 403-212-4921&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Susan Topple 212-234-2343&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们想查找的是 &lt;code&gt;Susan Goldberg&lt;/code&gt;，不能直接使用 &lt;code&gt;grep Susan Goldberg phonebook&lt;/code&gt; 命令，&lt;code&gt;grep&lt;/code&gt; 会把 &lt;code&gt;Goldberg&lt;/code&gt; 和 &lt;code&gt;phonebook&lt;/code&gt; 当作需要搜索的文件。&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; grep &lt;span class=&quot;string&quot;&gt;&#39;Susan Gold&#39;&lt;/span&gt; phonebook&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Susan Goldberg 403-212-4921&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当 &lt;code&gt;shell&lt;/code&gt; 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="shell" scheme="https://ehlxr.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 Nginx</title>
    <link href="https://ehlxr.me/2016/12/23/CentOS-%E5%AE%89%E8%A3%85-Nginx/"/>
    <id>https://ehlxr.me/2016/12/23/CentOS-安装-Nginx/</id>
    <published>2016-12-23T03:20:44.000Z</published>
    <updated>2017-10-13T06:30:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h1><p>首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ yum install gcc-c++</span><br><span class="line">$ yum install pcre pcre-devel</span><br><span class="line">$ yum install zlib zlib-devel</span><br><span class="line">$ yum install openssl openssl--devel</span><br></pre></td></tr></table></figure><h1 id="二、安装-Nginx"><a href="#二、安装-Nginx" class="headerlink" title="二、安装 Nginx"></a>二、安装 Nginx</h1><p>安装之前，最好检查一下是否已经安装有 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ find -name nginx</span><br></pre></td></tr></table></figure><a id="more"></a><p>如果系统已经安装了 Nginx，那么就先卸载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum remove nginx</span><br></pre></td></tr></table></figure><p>首先进入 /usr/local 目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><p>从官网下载最新版的 Nginx</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.9.6.tar.gz</span><br><span class="line">$ tar -zxvf nginx-1.9.6.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.9.6</span><br></pre></td></tr></table></figure><p>接下来安装，使用 <code>--prefix</code> 参数指定 Nginx 安装的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx <span class="comment"># 指定 Nginx 安装的目录 /usr/local/nginx</span></span><br><span class="line">$ make prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">$ make install prefix=/usr/<span class="built_in">local</span>/nginx</span><br></pre></td></tr></table></figure><p>如果没有报错，顺利完成后，最好看一下 nginx 的安装目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ whereis nginx</span><br></pre></td></tr></table></figure><p>安装完毕后，进入安装后目录（/usr/local/nginx）便可以启动或停止它了。</p><h1 id="二、基本操作命令"><a href="#二、基本操作命令" class="headerlink" title="二、基本操作命令"></a>二、基本操作命令</h1><h2 id="2-1-启动命令"><a href="#2-1-启动命令" class="headerlink" title="2.1 启动命令"></a>2.1 启动命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="2-2-重启命令"><a href="#2-2-重启命令" class="headerlink" title="2.2 重启命令"></a>2.2 重启命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf -s reload</span><br></pre></td></tr></table></figure><h2 id="2-3-停止命令"><a href="#2-3-停止命令" class="headerlink" title="2.3 停止命令"></a>2.3 停止命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf  -s stop</span><br></pre></td></tr></table></figure><p><code>-c</code> 制定配置文件的路径，如果不加 Nginx 会自动加载默认路径的配置文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装准备&quot;&gt;&lt;a href=&quot;#一、安装准备&quot; class=&quot;headerlink&quot; title=&quot;一、安装准备&quot;&gt;&lt;/a&gt;一、安装准备&lt;/h1&gt;&lt;p&gt;首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ yum install gcc-c++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install pcre pcre-devel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install zlib zlib-devel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ yum install openssl openssl--devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;二、安装-Nginx&quot;&gt;&lt;a href=&quot;#二、安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;二、安装 Nginx&quot;&gt;&lt;/a&gt;二、安装 Nginx&lt;/h1&gt;&lt;p&gt;安装之前，最好检查一下是否已经安装有 Nginx&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ find -name nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://ehlxr.me/tags/CentOS/"/>
    
      <category term="Nginx" scheme="https://ehlxr.me/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 rar、zip 解压缩</title>
    <link href="https://ehlxr.me/2016/12/22/CentOS-%E5%AE%89%E8%A3%85-rar%E3%80%81zip-%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    <id>https://ehlxr.me/2016/12/22/CentOS-安装-rar、zip-解压缩/</id>
    <published>2016-12-22T07:39:45.000Z</published>
    <updated>2017-07-10T04:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。</p><h1 id="一、rar-安装使用"><a href="#一、rar-安装使用" class="headerlink" title="一、rar 安装使用"></a>一、rar 安装使用</h1><p>Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：<a href="http://www.rarsoft.com/download.htm。" target="_blank" rel="noopener">http://www.rarsoft.com/download.htm。</a></p><h2 id="1-1-下载系统对应的版本"><a href="#1-1-下载系统对应的版本" class="headerlink" title="1.1 下载系统对应的版本"></a>1.1 下载系统对应的版本</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz</span><br></pre></td></tr></table></figure><h2 id="1-2-解压、安装"><a href="#1-2-解压、安装" class="headerlink" title="1.2 解压、安装"></a>1.2 解压、安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ tar -zxvf rarlinux-x64-5.4.0.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> rar</span><br><span class="line">$ make</span><br></pre></td></tr></table></figure><a id="more"></a><p>看见下面这些信息就是安装成功了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/bin</span><br><span class="line">mkdir -p /usr/<span class="built_in">local</span>/lib</span><br><span class="line">cp rar unrar /usr/<span class="built_in">local</span>/bin</span><br><span class="line">cp rarfiles.lst /etc</span><br><span class="line">cp default.sfx /usr/<span class="built_in">local</span>/lib</span><br></pre></td></tr></table></figure><h2 id="1-3-常用-rar-命令"><a href="#1-3-常用-rar-命令" class="headerlink" title="1.3 常用 rar 命令"></a>1.3 常用 rar 命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rar x centos.rar <span class="comment"># 解压 centos.rar 到当前目录</span></span><br><span class="line">$ rar centos.rar ./piaoyi.org/ <span class="comment"># 将 piaoyi.org 目录打包为 centos.rar</span></span><br></pre></td></tr></table></figure><h2 id="1-4-常见错误原因分析"><a href="#1-4-常见错误原因分析" class="headerlink" title="1.4 常见错误原因分析"></a>1.4 常见错误原因分析</h2><h3 id="1-4-1-如果在运行命令-rar-时-出现下面这个问题"><a href="#1-4-1-如果在运行命令-rar-时-出现下面这个问题" class="headerlink" title="1.4.1 如果在运行命令 rar 时,出现下面这个问题"></a>1.4.1 如果在运行命令 rar 时,出现下面这个问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rar: /lib/i686/nosegneg/libc.so.6: version <span class="string">'GLIBC_2.7'</span> not found (required by rar)</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp rar_static /usr/<span class="built_in">local</span>/bin/rar</span><br></pre></td></tr></table></figure><h3 id="1-4-2-使用-rar-的时候出现错误"><a href="#1-4-2-使用-rar-的时候出现错误" class="headerlink" title="1.4.2 使用 rar 的时候出现错误"></a>1.4.2 使用 rar 的时候出现错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash: /usr/<span class="built_in">local</span>/bin/rar: /lib/ld-linux.so.2: bad ELF interpreter: No such file or directory</span><br></pre></td></tr></table></figure><p>因为 64 位系统中安装了 32 位程序，解决方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install glibc.i686</span><br></pre></td></tr></table></figure><h3 id="1-4-3-重新安装-glibc-i686-以后还有如下类似错误"><a href="#1-4-3-重新安装-glibc-i686-以后还有如下类似错误" class="headerlink" title="1.4.3 重新安装 glibc.i686 以后还有如下类似错误"></a>1.4.3 重新安装 glibc.i686 以后还有如下类似错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error <span class="keyword">while</span> loading shared libraries: libstdc++.so.6: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><p>再继续安装包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install libstdc++.so.6</span><br></pre></td></tr></table></figure><h1 id="二、zip-unzip-安装使用"><a href="#二、zip-unzip-安装使用" class="headerlink" title="二、zip/unzip 安装使用"></a>二、zip/unzip 安装使用</h1><h2 id="2-1-检查是否有包含-zip（unzip）-的软件包"><a href="#2-1-检查是否有包含-zip（unzip）-的软件包" class="headerlink" title="2.1 检查是否有包含 zip（unzip） 的软件包"></a>2.1 检查是否有包含 zip（unzip） 的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ yum provides zip</span><br><span class="line">Loaded plugins: fastestmirror</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: mirrors.cqu.edu.cn</span><br><span class="line"> * extras: mirrors.cqu.edu.cn</span><br><span class="line"> * updates: mirrors.tuna.tsinghua.edu.cn</span><br><span class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</span><br><span class="line">Repo        : base</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">zip-3.0-11.el7.x86_64 : A file compression and packaging utility compatible with PKZIP</span><br><span class="line">Repo        : @base</span><br></pre></td></tr></table></figure><h2 id="2-2-安装-zip、unzip"><a href="#2-2-安装-zip、unzip" class="headerlink" title="2.2 安装 zip、unzip"></a>2.2 安装 zip、unzip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install zip</span><br><span class="line">$ yum install unzip</span><br></pre></td></tr></table></figure><h2 id="2-3-常用命令"><a href="#2-3-常用命令" class="headerlink" title="2.3 常用命令"></a>2.3 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ zip -r myfile.zip ./*</span><br><span class="line"><span class="comment"># 将当前目录下的所有文件和文件夹全部压缩成 myfile.zip 文件，-r 表示递归压缩子目录下所有文件.</span></span><br><span class="line"></span><br><span class="line">$ unzip -o -d /home/sunny myfile.zip</span><br><span class="line"><span class="comment"># 把 myfile.zip 文件解压到 /home/sunny/</span></span><br><span class="line"><span class="comment"># -o ：不提示的情况下覆盖文件</span></span><br><span class="line"><span class="comment"># -d：将文件解压缩到指定目录下</span></span><br><span class="line"></span><br><span class="line">$ zip -d myfile.zip smart.txt</span><br><span class="line"><span class="comment"># 删除压缩文件中 smart.txt 文件</span></span><br><span class="line"></span><br><span class="line">$ zip -m myfile.zip ./rpm_info.txt</span><br><span class="line"><span class="comment"># 向压缩文件中 myfile.zip 中添加 rpm_info.txt 文件</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。&lt;/p&gt;
&lt;h1 id=&quot;一、rar-安装使用&quot;&gt;&lt;a href=&quot;#一、rar-安装使用&quot; class=&quot;headerlink&quot; title=&quot;一、rar 安装使用&quot;&gt;&lt;/a&gt;一、rar 安装使用&lt;/h1&gt;&lt;p&gt;Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：&lt;a href=&quot;http://www.rarsoft.com/download.htm。&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.rarsoft.com/download.htm。&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-1-下载系统对应的版本&quot;&gt;&lt;a href=&quot;#1-1-下载系统对应的版本&quot; class=&quot;headerlink&quot; title=&quot;1.1 下载系统对应的版本&quot;&gt;&lt;/a&gt;1.1 下载系统对应的版本&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-2-解压、安装&quot;&gt;&lt;a href=&quot;#1-2-解压、安装&quot; class=&quot;headerlink&quot; title=&quot;1.2 解压、安装&quot;&gt;&lt;/a&gt;1.2 解压、安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ tar -zxvf rarlinux-x64-5.4.0.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; rar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ make&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://ehlxr.me/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://ehlxr.me/tags/Linux/"/>
    
      <category term="CentOS" scheme="https://ehlxr.me/tags/CentOS/"/>
    
      <category term="rar" scheme="https://ehlxr.me/tags/rar/"/>
    
      <category term="zip" scheme="https://ehlxr.me/tags/zip/"/>
    
  </entry>
  
  <entry>
    <title>Vim Tab 设置为 4 个空格</title>
    <link href="https://ehlxr.me/2016/12/02/Vim-Tab-%E8%AE%BE%E7%BD%AE%E4%B8%BA-4-%E4%B8%AA%E7%A9%BA%E6%A0%BC/"/>
    <id>https://ehlxr.me/2016/12/02/Vim-Tab-设置为-4-个空格/</id>
    <published>2016-12-02T12:46:05.000Z</published>
    <updated>2017-07-10T04:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>vim</code> 的配置文件中（Liunx：<code>/etc/vimrc</code>）中添加以下代码后，重启 <code>vim</code> 即可实现按 <code>TAB</code> 产生 <code>4</code> 个空格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> ts=4 <span class="comment"># 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格</span></span><br><span class="line"><span class="built_in">set</span> expandtab</span><br></pre></td></tr></table></figure><p>对于已保存的文件，可以使用下面的方法进行空格和 <code>TAB</code> 的替换：</p><p><code>TAB</code> 替换为空格：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> ts=4</span><br><span class="line">:<span class="built_in">set</span> expandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure><a id="more"></a><p>空格替换为 <code>TAB</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> ts=4</span><br><span class="line">:<span class="built_in">set</span> noexpandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure><p>加 <code>!</code> 是用于处理非空白字符之后的 <code>TAB</code>，即所有的 <code>TAB</code>，若不加 <code>!</code>，则只处理行首的 <code>TAB</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 &lt;code&gt;vim&lt;/code&gt; 的配置文件中（Liunx：&lt;code&gt;/etc/vimrc&lt;/code&gt;）中添加以下代码后，重启 &lt;code&gt;vim&lt;/code&gt; 即可实现按 &lt;code&gt;TAB&lt;/code&gt; 产生 &lt;code&gt;4&lt;/code&gt; 个空格：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ts=4 &lt;span class=&quot;comment&quot;&gt;# 注：ts 是 tabstop 的缩写，设 TAB 宽 4 个空格&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expandtab&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于已保存的文件，可以使用下面的方法进行空格和 &lt;code&gt;TAB&lt;/code&gt; 的替换：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TAB&lt;/code&gt; 替换为空格：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;:&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; ts=4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; expandtab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:%retab!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="开发工具" scheme="https://ehlxr.me/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Vim" scheme="https://ehlxr.me/tags/Vim/"/>
    
  </entry>
  
</feed>
